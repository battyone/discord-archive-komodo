==============================================================
Guild: Komodo
Channel: feed-github
Topic: Auto feed for all activities in GitHub. New notification as they happen in real-time.
After: 16-Dec-19 12:00 AM
Before: 17-Dec-19 12:00 AM
==============================================================

[16-Dec-19 03:28 AM] GitHub#0000

{Embed}
cipig
https://github.com/KomodoPlatform/atomicDEX-API/issues/574#issuecomment-565890644
[KomodoPlatform/atomicDEX-API] New comment on issue #574: ZEC swap fails \(mandatory\-script\-verify\-flag\-failed\)
ZEC swaps are working again. Thanks for the quick fix.

[16-Dec-19 03:28 AM] GitHub#0000

{Embed}
cipig
https://github.com/KomodoPlatform/atomicDEX-API/issues/574
[KomodoPlatform/atomicDEX-API] Issue closed: #574 ZEC swap fails \(mandatory\-script\-verify\-flag\-failed\)

[16-Dec-19 06:46 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565927798
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
There are two reasons why the DHT is not practical for the orderbook: speed and size. (BitTorrent) DHT is tailored to only support the small entries.

https://github.com/KomodoPlatform/atomicDEX-API/blob/20cda8ccc3e32413b6a813e1c6d03be136e88e76/mm2src/peers/peers.rs#L671

The orderbook, on the other hand, can be large.

The two are related: the size limit means we need to store multiple entries, further reducing the speed.

One way to tackle the size problem is to use the [webtorrent]...

[16-Dec-19 07:03 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565931695
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
could the DHT be used for nodes to publish a price vector? that would be relatively small and then other nodes could reconstruct partial orderbooks from the DHT entries they have seen.

orderbooks would only need to store prices that are close to the best available, ie. top of the orderbook. that would reduce its size a lot. though you would need to deal with orderbook stuffing where a lot of small orders at lower prices makes the big orders invisible. i guess some sort of volume weighted "...

[16-Dec-19 07:21 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565936292
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
Yeah, that's also a cool idea, to implement the orderbook as a loosely ordered DHT skiplist-like index that a new peer navigates to find the chunks of the interesting price range. Instead of downloading the entire orderbook the peer will only be getting the orders it is interested in (in an ideal situation - just a single order). TY, I'll think about it.

[16-Dec-19 07:22 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565936531
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
Along with price we still need to store at least volume, order creator pubkey and signature which is already over 100 bytes per order (pubkey - 33 bytes, signature - 64 bytes). It means that we can store about 10 orders in 1 DHT entry. Even if we don't store the signature it will be about 50 bytes (or much more) since price and volume are either BigDecimal or BigRational and actually have arbitrary size.
If we don't store node or another identification information of node/order we will need ...

[16-Dec-19 07:23 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565936892
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> Along with price we still need to store at least volume, order creator pubkey and signature which is already over 100 bytes per order

Not really, we can store the price and a small random value that allows a peer to find more information about that order in the DHT.

[16-Dec-19 07:42 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565942726
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
Ok, size might be not big issue since we might store the id or hash, but it still should have reasonable size to make the collision chance negligible.
 > Chance is we don't need that precision for individual prices of a chunk. We need precision only for the lowest and highest prices there.

How are we about to handle it? What if some price is not lowest, but some other orders are matched and it becomes lowest? So the node broadcasted it must track it's state continuously and then update th...

[16-Dec-19 07:48 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565944469
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> So I'm optimistic about it. And a certain delay is less critical IMHO than the availability of a truly decentralized order matching, even as a backup strategy.

Yes, it can be considered still, maybe I'm just less optimistic ref this :slightly_smiling_face: 

> But it's cool if you have something better in mind!

Right now I don't but according to the initial comment of this issue you already had a research on this topic and mentioned few alternatives. Once we start working on general...

[16-Dec-19 07:51 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565945486
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> Also regarding DHT race conditions: do I understand correct that to store new value in such vector we must retrieve it first, append new value and then store the entire new vector back in DHT?

Nope, "a loosely ordered DHT skiplist-like index" is not a simple array, it's more like an optimistic graph.

> How are we about to handle it? What if some price is not lowest, but some other orders are matched and it becomes lowest?

This is an index that allows a peer to find the prices close...

[16-Dec-19 07:55 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565946530
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
i imagine the ideal solution will be composed of a variety of methods, including timestamped top of orderbooks, pubkeys specific price vectors, maybe other info.

also full precision isnt needed, just to find the pubkey(s) that are most likely to have the current best price (or within a close range to it)

if to try to make all nodes always have a full orderbook, i think that wont work due to bandwidth
but if to try to make sure that most of the nodes most of the time have a reasonably c...

[16-Dec-19 08:05 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565949741
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> These are alternative DHT implementations, the DHT itself isn't going away, it is the best abstraction we have so far.

I'm not against the DHT, but my according to my personal experience ref Libtorrent DHT (mostly as user since I'm implementing my code on top of it) I have the impression that it might not match our requirements. But of course if we find out different during further research I will accept it.

> if to try to make all nodes always have a full orderbook,

I don't propos...

[16-Dec-19 08:07 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565950460
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
i dont think total consistency is needed.
since the nodes will be negotiating directly, the final details on prices maybe can be done directly?
it is more a list of most reliable pubkeys with decent prices list, than an orderbook

[16-Dec-19 08:10 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565951504
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
The key point here is 
> concurrent order broadcasting by different nodes must not affect each other. Both orders must be displayed on other nodes.

So we first need to know that the price exists, but how do we know if it's not present in vector because of race condition?

[16-Dec-19 08:13 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565952124
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> I'm not against the DHT, but my according to my personal experience ref Libtorrent DHT (mostly as user since I'm implementing my code on top of it) I have the impression that it might not match our requirements.

libtorrent is a temporary step and is not an option for further development, but https://github.com/nazar-pc/webtorrent-dht, for example, has the same chunk size limit, and we might still want the ability to reuse existing networks.

There is value in having a set of metrics an...

[16-Dec-19 08:19 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565954115
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
We're designing not just `decentralizing system`, we're designing the exchange. Where people exchange real money and some of them will generate profits on it. The consistency is important here. I'm as trader would like to know as fast as possible that there's good price order which I'd like to match immediately.

[16-Dec-19 08:21 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565954788
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
I prefer to pick my battles and I won't be fighting a CAP theorem. If a trader wants precision, he can opt in into seed-based trading, using a central seed node or a set of replicated seed nodes that stops working as soon as there is a partition.

[16-Dec-19 08:22 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565954958
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
```concurrent order broadcasting by different nodes must not affect each other. Both orders must be displayed on other nodes.
```
i dont think all orders need to be on all nodes.
the most important is that a node is able to ordermatch at a price that is close to the best, there is not any need for there to be consistent orderbooks, just consistent pricing

i think this relaxation of orderbook consistency will allow for a much lower bandwidth usage. and as long as the absolute best price ...

[16-Dec-19 08:28 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565956897
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
let us take a step back...

the goal here is to enable people to complete atomic swaps at very close to the best price possible, right?

if we can agree on that, then we should also be able to agree that nothing in that says anything about complete orderbooks, let alone a global consensus on it.

which means this is more about finding the online pubkeys with decent prices, preferably reliable nodes. so maybe instead of orderbook, it should be imagined as the best pubkeys to query for th...

[16-Dec-19 08:35 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565959123
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
https://en.wikipedia.org/wiki/CAP_theorem#Explanation
```
In the absence of network failure – that is, when the distributed system is running normally – both availability and consistency can be satisfied.

CAP is frequently misunderstood as if one has to choose to abandon one of the three guarantees at all times. In fact, the choice is really between consistency and availability only when a network partition or failure happens; at all other times, no trade-off has to be made
```
So even...

[16-Dec-19 08:36 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565959391
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
here is a possible solution:
1. create dedicated gossip networks for specific trading pairs (or maybe for specific coins)
2. design a gossip protocol that propagates a nodes price vector and best known external price and reliability
3. a new node coming online would connect to the coin specific gossip network, immediately, it will see the highest bid and lowest ask (as all packets in this network include that along with that pubkey price vector)
4. when a swap is being started, a pre-swap...

[16-Dec-19 08:37 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565959863
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
where I'm coming from, yes, the reliability of order matching is much more important than the precision

BTW, I think that most currency exchanges don't work with orderbooks but are rather placing orders against a certain price margin, and I wonder if the way we match against particular orders currently is a future salability issue. the user interface will not be able to handle the orderbooks when there will be hundreds or thousands of orders

[16-Dec-19 08:41 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565961090
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> Pubkey reliability is more topic of reputation system. If some node with bad networking conditions (even unintentional) somehow gets through and places the order, matches it and then fails the swap it will be banned.
> The other question is: may we validate other node networking conditions to check it's reliability even `before` the order is matched and node doesn't have previous swaps?

I guess i am saying that i feel at least part of the best price propagation should include aspect o...

[16-Dec-19 08:46 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565962627
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> the idea of matching a particular order will quickly become moot once there will be a decent order matching contention. (cool, i picked the order, only five users picked it before me)

ordermatching needs to be based on price and volume, with the ordermatch process filtering out unreliable ones and really, if the user says price X is ok, then any pubkey with price of X or better, is ok. of course, if we can find a much better price, then that can be used.

in mm1, what i did was start a...

[16-Dec-19 08:49 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565963636
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> if the user says price X is ok, then any pubkey with price of X or better, is ok

cool, makes sense and changes the way we think about it, I'm glad we hashed this today

[16-Dec-19 08:57 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565966415
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
by using the gossip network to propagate the pre-ordermatch auction, then nodes can see if a better price is already submitted and avoid sending a response. 

can you think of a more bandwidth efficient way to find the best currently available price?

it assumes there is a gossip network that only has nodes that care about a specific coin (or trading pair for high volume trading pairs). it seems pretty clear that the pubkeys of the nodes with the best prices, along with the best prices ca...

[16-Dec-19 09:05 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565969357
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
OK, to summarize, orderbook is only for getting a sense of the current prices and not directly involved in the ordermatching. this avoids all the orderbook syncing issues.

then by isolating traffic, it eliminates the N*N explosion of packets. we do need an efficient way of broadcasting a packet on a gossip network, but i think that is possible to do pretty efficiently, certainly not N*N

given that and a packet design to add the best known bid/ask with each packet, instantly any node in ...

[16-Dec-19 09:10 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565971154
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> the idea of matching a particular order will quickly become moot once there will be a decent order matching contention. (cool, i picked the order, only five users picked it before me)

If you pick the very best price on CEX and it goes away and there're no orders with same or better price depending on your settings your order will be either cancelled or stay on orderbook as maker. MM2 is converting the order to maker one's automatically by default now.

> if the user says price X is ok,...

[16-Dec-19 09:14 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565972633
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> MM2 is converting the order to maker one's automatically by default now

this doesn't scale IMHO

> can you think of a more bandwidth efficient way to find the best currently available price?

the problem with MM1 was that it only worked in the presence of open ports and didn't account for routing anomalies between the peers. DHT reverses the networking (a peer as a client uses the DHT network as a set of servers; *some* of these servers will be available through open ports, limited N...

[16-Dec-19 09:16 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565973491
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
`this doesn't scale IMHO` - then we should find a way to scale this since it's one of core exchanges feature. The only thing we need to add is user selection: either he would like order to stay in orderbook until explicitly cancelled by user or cancelled automatically if not matched.

[16-Dec-19 09:19 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565974288
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
it's more of a workaround to matching explicit orders that a feature. when the order matching will work against a price rather than against a specific order (see the idea of a virtual orderbook above) this workaround will be designed away as a bonus

[16-Dec-19 09:19 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565974490
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> in the presence of a large amount of orders this will effectively _shard_ the system.

as long as each shard as approximately the same highbid/lowask, it wont matter

having a traditional p2p network that has no phones, but just normal unix nodes that dont have connectivity issues. this can be the "fullnode" that gossips about the price quotes for pubkey, best prices and they can be queried by lite nodes as to the current price.

not sure what to do about the case where a phone has th...

[16-Dec-19 09:24 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565976297
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> not sure what to do about the case where a phone has the best price and it cant connect to the gossip network... 

if a network is partitioned and peer A can't talk to peer B through the DHT (or caretakers) then there's nothing we can do about it, the peers should skip each other

[16-Dec-19 09:28 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565977784
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
is there a way to do the taker auction using the DHT?

[16-Dec-19 09:30 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565978507
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
i think we can assume that the gossip network wont be partitioned, as it would be composed of long term maker nodes and not running on phones.

and since these are highly connectible nodes, i would think that we can require that to join the gossip network, your node needs to be able to be connected to from phones?

in that case, it seems we are one step away

[16-Dec-19 09:31 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565978703
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
@ArtemGr 

> it's more of a workaround to matching explicit orders that a feature. when the order matching will work against a price rather than against a specific order (see the idea of a virtual orderbook above) this workaround will be designed away as a bonus

This is not workaround, please try to login to exchange and create the order, you'll see something like this (Good till cancelled means that your order will be automatically converted to maker):
![image](https://user-images.gith...

[16-Dec-19 09:33 AM] GitHub#0000

{Embed}
jl777
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565979538
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
ok, so at this point does it seem reasonable to make a decentralized and highly scalable ordermatch system where the price will be close to the best price available?

[16-Dec-19 09:44 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565983619
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> is there a way to do the taker auction using the DHT?

we use a large DHT for the peers to communicate during the swap and it makes sense to keep it that way, but the order matching will be easier to implement on the caretaker nodes methinks

> ok, so at this point does it seem reasonable to make a decentralized and highly scalable ordermatch system where the price will be close to the best price available?

we'll be designing and implementing one for the WASM port soon, that's why I ...

[16-Dec-19 09:51 AM] GitHub#0000

{Embed}
ArtemGr
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565986047
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
> MM2 is not matching against specific order. It broadcasts the request to network and may receive few messages back and then match against the other order that has better price

Good to know, Artem. With all the focus on precise matching lately it wasn't obvious to me that we up-match. But the conversion from Taker to Maker still seems like an implementation detail to me. Anyway, I'm actively using pair programming sessions now and I'll be sure to invite you when we'll come to the nitty-gr...

[16-Dec-19 09:55 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565987897
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
@ArtemGr Thank you! I was just too eager ref precision and consistency so I can understand where your impression comes from :slightly_smiling_face: When I was coding the current ordermatching I was keeping in mind that on CEX I was always matching with better price even if I set non-better price manually so implemented same in MM2 according our `like CEX UX` goal.

[16-Dec-19 09:58 AM] GitHub#0000

{Embed}
artemii235
https://github.com/KomodoPlatform/atomicDEX-API/issues/373#issuecomment-565988823
[KomodoPlatform/atomicDEX-API] New comment on issue #373: p2p for ordermatching, plans
`But the conversion from Taker to Maker still seems like an implementation detail to me.` - yes, actually it's implementation detail since it's the only mode of MM2 operation now, but it's better to refactor it allowing user to choose and possibly even change the default mode.

[16-Dec-19 11:30 AM] GitHub#0000

{Embed}
satindergrewal
https://github.com/dimxy/komodo
[dimxy/komodo] New star added

[16-Dec-19 01:18 PM] GitHub#0000

{Embed}
Mixa84
https://github.com/Mixa84/komodo/commit/4baaa981112b6655166d32a8ebb4208eb56aec01
[komodo:FSM] 1 new commit
[`4baaa98`](https://github.com/Mixa84/komodo/commit/4baaa981112b6655166d32a8ebb4208eb56aec01) Fix oraclefeed - Mixa84

[16-Dec-19 01:18 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on FSM

[16-Dec-19 01:19 PM] GitHub#0000

{Embed}
Mixa84
https://github.com/Mixa84/komodo/compare/4baaa981112b...796739dbc262
[komodo:FSM] 2 new commits
[`5e916ab`](https://github.com/Mixa84/komodo/commit/5e916ab47dc2da3ddceb604422708ba703d12819) Merge pull request #1778 from Mixa84/FSM - jl777
[`796739d`](https://github.com/Mixa84/komodo/commit/796739dbc26287daba47524dbcba8bfb2e6aa97b) Merge branch 'FSM' of https://github.com/jl777/... - Mixa84

[16-Dec-19 01:19 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on FSM

[16-Dec-19 01:25 PM] GitHub#0000

{Embed}
Mixa84
https://github.com/jl777/komodo/pull/1779
[jl777/komodo] Pull request opened: #1779 Fsm

[16-Dec-19 01:25 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on FSM

[16-Dec-19 01:36 PM] GitHub#0000

{Embed}
jl777
https://github.com/jl777/komodo/pull/1779
[jl777/komodo] Pull request closed: #1779 Fsm

[16-Dec-19 01:36 PM] GitHub#0000

{Embed}
jl777
https://github.com/jl777/komodo/compare/5e916ab47dc2...daa103484a17
[komodo:FSM] 3 new commits
[`4baaa98`](https://github.com/jl777/komodo/commit/4baaa981112b6655166d32a8ebb4208eb56aec01) Fix oraclefeed - Mixa84
[`796739d`](https://github.com/jl777/komodo/commit/796739dbc26287daba47524dbcba8bfb2e6aa97b) Merge branch 'FSM' of https://github.com/jl777/... - Mixa84
[`daa1034`](https://github.com/jl777/komodo/commit/daa103484a17c526f51c3abca22fb4cf23d03e00) Merge pull request #1779 from Mixa84/FSM - jl777

[16-Dec-19 01:37 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on FSM

[16-Dec-19 01:42 PM] GitHub#0000

{Embed}
Mixa84
https://github.com/Mixa84/komodo/commit/daa103484a17c526f51c3abca22fb4cf23d03e00
[komodo:FSM] 1 new commit
[`daa1034`](https://github.com/Mixa84/komodo/commit/daa103484a17c526f51c3abca22fb4cf23d03e00) Merge pull request #1779 from Mixa84/FSM - jl777

[16-Dec-19 01:43 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on FSM

[16-Dec-19 02:19 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on FSM

[16-Dec-19 02:21 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on FSM

[16-Dec-19 02:30 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on FSM

[16-Dec-19 02:43 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on FSM

[16-Dec-19 02:44 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on FSM

[16-Dec-19 02:58 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI failure on FSM

[16-Dec-19 02:58 PM] GitHub#0000

{Embed}
https://github.com/Mixa84/komodo/commit/796739dbc26287daba47524dbcba8bfb2e6aa97b
[komodo] GitHub Actions checks failure on FSM

[16-Dec-19 03:05 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI success on FSM

[16-Dec-19 03:06 PM] GitHub#0000

{Embed}
https://github.com/Mixa84/komodo/commit/4baaa981112b6655166d32a8ebb4208eb56aec01
[komodo] GitHub Actions checks success on FSM

[16-Dec-19 03:22 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI failure on FSM

[16-Dec-19 03:22 PM] GitHub#0000

{Embed}
https://github.com/Mixa84/komodo/commit/daa103484a17c526f51c3abca22fb4cf23d03e00
[komodo] GitHub Actions checks failure on FSM

[16-Dec-19 03:28 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI success on FSM

[16-Dec-19 03:28 PM] GitHub#0000

{Embed}
https://github.com/jl777/komodo/commit/796739dbc26287daba47524dbcba8bfb2e6aa97b
[komodo] GitHub Actions checks success on FSM

[16-Dec-19 03:29 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI failure on FSM

[16-Dec-19 03:29 PM] GitHub#0000

{Embed}
https://github.com/jl777/komodo/commit/daa103484a17c526f51c3abca22fb4cf23d03e00
[komodo] GitHub Actions checks failure on FSM

[16-Dec-19 04:02 PM] GitHub#0000

{Embed}
dimxy
https://github.com/dimxy/komodo/compare/9e408f57612f^...fc6a2889c42e
[komodo:prices\-gold\-feed\-rebased] 216 new commits
[`9e408f5`](https://github.com/dimxy/komodo/commit/9e408f57612fe276538e9e3323833a395ad4fd2e) Gateways refactor fixes (#45) - Mixa84
[`b72c105`](https://github.com/dimxy/komodo/commit/b72c105a45dc9a8308220a79b6a9fc60559a5db7) Fix gatewayswithdraw rpc lock - Mixa84
[`5e916ab`](https://github.com/dimxy/komodo/commit/5e916ab47dc2da3ddceb604422708ba703d12819) Merge pull request #1778 from Mixa84/FSM - jl777
[`b4da5e4`](https://github.com/dimxy/komodo/commit/b4da5e4ad8b208d4039fa5c48dab0dea4b4101b6) added metalstock cmd params and retrieving - dimxy
[`2edca26`](https://github.com/dimxy/komodo/commit/2edca265f9b9f82b335cf6090134f09fef3ba98e) added check for empty symbol path and count==0 - dimxy

[16-Dec-19 04:02 PM] GitHub#0000

{Embed}
dimxy
[dimxy/komodo] New branch created: prices\-gold\-feed\-rebased

[16-Dec-19 04:03 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] macOS\-latest CI success on prices\-gold\-feed\-rebased

[16-Dec-19 04:39 PM] GitHub#0000

{Embed}
ca333
https://github.com/KomodoPlatform/komodo/commit/9536ad829967589c91e66e38c4ca52df91c8737e
[komodo:dev] 1 new commit
[`9536ad8`](https://github.com/KomodoPlatform/komodo/commit/9536ad829967589c91e66e38c4ca52df91c8737e) rm HUSH3 - ca333

[16-Dec-19 04:40 PM] GitHub#0000

{Embed}
ca333
https://github.com/KomodoPlatform/komodo/commit/d200ea8286390e224a319b328a74bf45dc0f3360
[komodo:dev] 1 new commit
[`d200ea8`](https://github.com/KomodoPlatform/komodo/commit/d200ea8286390e224a319b328a74bf45dc0f3360) rm HUSH3 - ca333

[16-Dec-19 05:08 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] Win Build success on prices\-gold\-feed\-rebased

[16-Dec-19 06:02 PM] GitHub#0000

{Embed}
https://help.github.com/en/actions
[komodo] ubuntu\-18\.04 CI success on prices\-gold\-feed\-rebased

[16-Dec-19 06:02 PM] GitHub#0000

{Embed}
https://github.com/dimxy/komodo/commit/fc6a2889c42ea4890e63a85e4f3a4f52a73b834b
[komodo] GitHub Actions checks success on prices\-gold\-feed\-rebased

