AuthorID;Author;Date;Content;Attachments;Reactions;
"412323938782150658";"SHossain#0007";"13-Feb-19 03:26 PM";"`&` and `-daemon` does the same job";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:32 PM";"Got the faucet working, OMG, this is just incredible.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:32 PM";"But the addresses and keys are hardcoded right?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:35 PM";"so the myCCAddress is built from the pubKey that I published right?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:39 PM";"Yes, your CC address generating for your `-pubkey`.
This `pubkey` param is like a ID or passport in the CC world.

Here you can find conceptual description of faucetCC:
https://github.com/KomodoPlatform/Mastering_CryptoConditions/blob/master/all_chapters.md#chapter-6---faucet-example
And RPC calls examples are in this file on faucet page:
https://docs.google.com/spreadsheets/d/1l0dWEPcrv9zE11_TD-XrX_HIYV0VLpadCJN6hvaZERc/edit#gid=211514340";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:39 PM";"So when doing `faucetfund` it will get the funds from the CC address?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:39 PM";"If you doing faucetfund it will get the funds from your wallet";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:40 PM";"Okay, meaning the UTXOs right?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:42 PM";"so everytime i do a rpc call, does it make a transaction? or only just those involving funds? Like
`faucetfund` creates a tx but `faucetaddress` doesn't";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:42 PM";"I asked this because in Some other Smart Contract blockchain, every process needs gas . 😄";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:44 PM";"`faucetaddress` is a debug call which only scanning but not generating any transaction
`faucetfund` - call which generating raw transaction with needed params to fund faucet";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:46 PM";"You can easily check in details inputs and outputs of generated transaction 
```./komodo-cli -ac_name=assetchain faucetfund 1
{
  ""result"": ""success"",
  ""hex"": ""hexhere""
}
```
``` ./komodo-cli -ac_name=assetchain decoderawtransaction <hexgeneratedbyfaucetfund>```";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:47 PM";"okay got it on the link you sent";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:48 PM";"this really nice";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:48 PM";"what an innovation";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:48 PM";"To broadcast transaction on blockchain use `./komodo-cli -ac_name=assetchain sendrawtransaction hex` and you'll get transaction id";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:48 PM";"then the transaction would have the Crypto condition type right?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:48 PM";"You can create really incredible things by determining rules for special UTXOs";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:48 PM";"```  ""vout"": [
    {
      ""value"": 1.00000000,
      ""valueZat"": 100000000,
      ""n"": 0,
      ""scriptPubKey"": {
        ""asm"": ""a22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401 OP_CHECKCRYPTOCONDITION"",
        ""hex"": ""2ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc"",
        ""reqSigs"": 1,
        ""type"": ""cryptocondition"",
        ""addresses"": [
          ""R9zHrofhRbub7ER77B7NrVch3A63R39GuC""
        ]```";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 03:49 PM";"set your pubkey like this (change ROGUE to TXSCLCC) https://github.com/KomodoPlatform/komodo/wiki/Get-Started-with-Rogue-Game#set-pubkey-value";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:50 PM";"Some vouts are `cryptoconditon` type. There is `eval` codes also to determine to which CC it's related. I advice you to read whole `Mastering cryptoconditons` book if you want to wrap head";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:51 PM";"I will @TonyL atleast right now I have a head start to show this demo on the presentation";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:51 PM";"Are there any testnet coins I can use to like demo all the faucet calls?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:52 PM";"```$ ./komodo-cli -ac_name=TXSCLCC faucetfund 1
{
  ""result"": ""error"",
  ""error"": ""couldnt create faucet funding transaction""
}```";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:53 PM";"I guess it needs atleast 1 KMD";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:53 PM";"haha";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:53 PM";"1 TXSCLCC not KMD 😃";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:53 PM";"To check balance use `./komodo-cli -ac_name=TXSCLCC getbalance`";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:53 PM";"You may try to mine some coins by mining enabling:
`./komodo-cli -ac_name=TXSCLCC setgenerate true`";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:54 PM";"okay, will have some funds overnight maybe?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:55 PM";"or maybe someone can send to me?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:55 PM";"😃";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:55 PM";"I think someone can send it to you, maybe @SHossain have TXSCLCC";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 03:55 PM";"what is your address?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:55 PM";"the myAddress part right?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 03:55 PM";"`./komodo-cli -ac_name=TXSCLCC getaccountaddress """"`";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:55 PM";"RUvr17LDxHhn5VTWKKcqpDuDEU2Eo1rXxa";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:56 PM";"yeah got it";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 03:56 PM";"sent fff466cea64aa5d6908b4d0af98271359df886fd9c79380258ce88ba4d46f1d6";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:57 PM";"thanks, 150 right?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 03:57 PM";"thank you very much";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 03:57 PM";"777 coins";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:01 PM";"Thanks will the server for this asset still be available on Monday, I might have my initial presentation and demo";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 04:03 PM";"what do you mean? your server or TXSCLCC seed nodes?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:04 PM";"the TXSCLCC seed nodes.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:05 PM";"""hex"": ""2ea22c8020e029c511da55523565835887`e4`12e5a0c9b920801b007000df45e545f25028248103120c008203000401cc"", on the e4 on this means `EVAL_FAUCET`?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:07 PM";"Nope, hex is randomly (almost because CC script generating it) generated - don't have information readable by human unless you decode it. Eval codes are defined in `komodo/src/cc/eval.h`";"";"";
"412323938782150658";"SHossain#0007";"13-Feb-19 04:09 PM";"the TXSCLCC chain is online for couple of months now and will be there
they are also being notarized";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:10 PM";"Ok Thanks @SHossain";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:10 PM";"@TonyL So you can't really know what the CC being run just by looking into the tx output right?";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:12 PM";"You can't know it by looking on hex, correct";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:12 PM";"Easy example";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:13 PM";"I've pre-generated transaction by `faucetfund 1`
And decode it
One of the vouts is cryptoconditions type with 1 coin amount:
```  ""vout"": [
    {
      ""value"": 1.00000000,
      ""valueZat"": 100000000,
      ""n"": 0,
      ""scriptPubKey"": {
        ""asm"": ""a22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401 OP_CHECKCRYPTOCONDITION"",
        ""hex"": ""2ea22c8020e029c511da55523565835887e412e5a0c9b920801b007000df45e545f25028248103120c008203000401cc"",
        ""reqSigs"": 1,
        ""type"": ""cryptocondition"",
        ""addresses"": [
          ""R9zHrofhRbub7ER77B7NrVch3A63R39GuC""
        ]
      }```";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:14 PM";"Yes";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:14 PM";"Checking faucetaddress:
```./komodo-cli -ac_name=ROGUE faucetaddress
{
  ""result"": ""success"",
  ""FaucetCCAddress"": ""R9zHrofhRbub7ER77B7NrVch3A63R39GuC"",
  ""CCbalance"": 0.00000000,
  ""FaucetNormalAddress"": ""RKQV4oYs4rvxAWx1J43VnT73rSTVtUeckk"",
  ""FaucetCCTokensAddress"": ""RKaT8VfRSsu4qWL2kfW3PCzejrzJxi1TcJ"",
  ""myAddress"": ""RMmHb7wKPkvwbin9YowDyFaM5yiLrVAG2m"",
  ""myCCAddress(Faucet)"": ""RRMbU8VyrcUqywLb6iWqYnxoZP3yXPr3En"",
  ""myCCaddress"": ""RRMbU8VyrcUqywLb6iWqYnxoZP3yXPr3En"",
  ""myCCbalance"": 0.00000000,
  ""myaddress"": ""RMmHb7wKPkvwbin9YowDyFaM5yiLrVAG2m"",
  ""mybalance"": 326.12244969
}
```";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:14 PM";"`""FaucetCCAddress"": ""R9zHrofhRbub7ER77B7NrVch3A63R39GuC""`";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:14 PM";"Match with address in cryptoconditions vout of 1 coin 😃";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:15 PM";"Ok that's the only time we know that yes this a faucet CC.";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:15 PM";"There are some RPC calls to automatically check to which CC transaction is related but I not remember it since it's using CC devs for debug mostly";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:15 PM";"But manually way of detection is like this in my understanding";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:16 PM";"I think it might be worth adding the eval codes somewhere in the tx I think. since just merely looking into the tx with the eval code makes it easy to know which CC was ran.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:16 PM";"But this is just my opinion.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"13-Feb-19 04:17 PM";"😃";"";"";
"272003866906722306";"TonyL#3577";"13-Feb-19 04:21 PM";"Stare on hexes and txids not not the most exciting thing to do it's better if computer doing this job 😃";"";"";
"405011811511828481";"Alright#0419";"13-Feb-19 06:58 PM";"@josephnicholas GMT+8 https://github.com/jl777/komodo/blob/master/src/cc/eval.h 

If you look at the hex tony showed you, it will have a corresponding EVAL code for the cryptocondition in it. If you look at the OP_RETURN hex, it will show you what kind of transaction it is for the EVAL code";"";"";
"405011811511828481";"Alright#0419";"13-Feb-19 07:13 PM";"@josephnicholas GMT+8 there is also an rpc called `decodeccopret` which will decode a CC OP_RETURN ScriptPubkey and tell you which cc it is from";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 01:11 AM";"@TonyL and @Alright Thank you very much.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 01:41 AM";"I didn't find the RPC call, it seems to be not yet implemented?";"";"";
"405011811511828481";"Alright#0419";"14-Feb-19 02:00 AM";"@josephnicholas GMT+8 believe you have to use FSM branch of this repo https://github.com/jl777/komodo";"";"";
"405011811511828481";"Alright#0419";"14-Feb-19 02:00 AM";"also it might not be shown in the help command, not sure";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 02:06 AM";"Yeah, I am currently on `master` branch, but its quite good to know that there is that RPC call present though.";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 02:41 AM";"@jl777c So when we say that CC smart contracts are linked on a specific address and funds are locked only in the contract, how does it differentiate with balanced based smart contracts, contracts are also separated on different address right?";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 02:42 AM";"So we fund every contract to activate it?";"";"";
"455741312273219595";"jl777c#5810";"14-Feb-19 05:24 AM";"CC is utxo based";"";"";
"455741312273219595";"jl777c#5810";"14-Feb-19 05:24 AM";"depending on what specifically you mean by activate....";"";"";
"455741312273219595";"jl777c#5810";"14-Feb-19 05:25 AM";"in some sense the CC are already active, just waiting for funds. but I can see how being dormant is not active.";"";"";
"455741312273219595";"jl777c#5810";"14-Feb-19 05:26 AM";"just because two totally different things have one thing in common, it doesnt really make them the same";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"14-Feb-19 06:13 AM";"Thanks @jl777c";"";"";
"365714438864633856";"dukeleto#7326";"14-Feb-19 09:16 PM";"@josephnicholas GMT+8 master branch is rarely updated, `beta` or `dev` is probably more what you want";"";"";
"365714438864633856";"dukeleto#7326";"14-Feb-19 09:17 PM";"and for cryptocontracts, many things will only be in `FSM` as alright said";"";"";
"365714438864633856";"dukeleto#7326";"14-Feb-19 09:19 PM";"the branches go like this: jl777 > FSM > dev > beta > master, where the latest code goes in at the left and travels to the right. I am sure somebody will correct me if I am wrong, but I think that is the general structure (there are more branches, but those are the main long-running integration points of various topic branches/PRs/etc)";"";"";
"544703121675386880";"josephnicholas GMT+8#5904";"15-Feb-19 01:04 AM";"@dukeleto thank you for the information";"";"";
"365714438864633856";"dukeleto#7326";"16-Feb-19 01:12 AM";"I think i have fixed building cclib on mac, doing another test right now";"";"";
"365714438864633856";"dukeleto#7326";"16-Feb-19 01:25 AM";"@jl777c https://github.com/jl777/komodo/pull/1252";"";"";
"347922216429813760";"grewalsatinder#9653";"16-Feb-19 04:39 AM";"Awesome!";"";"";
"365714438864633856";"dukeleto#7326";"16-Feb-19 12:06 PM";"finally!";"";"";
"365714438864633856";"dukeleto#7326";"16-Feb-19 12:07 PM";"it was really bugging me, but I sat down, and it ended up being easier than I thought. I just had to think about how hard it was for a while until I stopped caring about that, and sat down to fix it in 5 minutes";"";"👏 (1),😄 (1)";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 02:28 AM";"https://medium.com/@ConsenSys/thoughts-on-utxo-by-vitalik-buterin-2bb782c67e53";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 02:28 AM";"I just read this...";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 02:29 AM";"> 2. UTXOs are stateless, and so are not well-suited to applications more complex than asset issuance and transfer that are generally stateful, such as various kinds of smart contracts.

`stateless` is what I need to get my head clear on";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 03:07 AM";"okay, cleared... I think....";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 03:10 AM";"what would be the answer to these two points from this article?
1. UTXOs are unnecessarily complicated, and the complexity gets even greater in the implementation than in the theory.
2. UTXOs are stateless, and so are not well-suited to applications more complex than asset issuance and transfer that are generally stateful, such as various kinds of smart contracts.";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 03:11 AM";"I understand the point 1, UTXOs are not as easy to manage. But they provide greater security over Balance based model of blockchain";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 03:11 AM";"for second point, How does CC solves this statefulness?";"";"";
"347922216429813760";"grewalsatinder#9653";"18-Feb-19 03:28 AM";"need to re-read mastering cryptoconditions....";"";"";
"232679450301431808";"blackjok3r#3181";"18-Feb-19 05:01 AM";"I think CC just adds a possible state to a utxo... Probably over simplified but thats what they appear to do to me.";"";"";
"455741312273219595";"jl777c#5810";"18-Feb-19 05:02 AM";"the blockchain has the state information, ie. the utxo an address has, whether a utxo is unspent";"";"";
"455741312273219595";"jl777c#5810";"18-Feb-19 05:03 AM";"I have almost directly mapped the CC logic to what the blockchain does directly, using linked lists, via baton utxo. the baton provides the mutual exclusiveness, guarantee of single usage, it also allows to reconstruct history by traversing the vins";"";"";
"455741312273219595";"jl777c#5810";"18-Feb-19 05:06 AM";"with a balance based system, how can you be sure it isnt being double spent? sure it is possible to construct a complex system to achieve this, but attack vectors can target the entire balance and it makes the core needlessly more complex. yes, utxo are more of a pain to be dealing with than a balance based, but if that is what it takes to make things fast, secure and scalable, it is a price worth paying";"";"";
"455741312273219595";"jl777c#5810";"18-Feb-19 05:06 AM";"also, if utxo based things are so hard, then how am I able to write them so fast?";"";"🤔 (2),👌 (1),shexy (5)";
