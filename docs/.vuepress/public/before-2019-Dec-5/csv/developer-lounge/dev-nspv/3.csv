AuthorID;Author;Date;Content;Attachments;Reactions;
"455741312273219595";"jl777c#5810";"02-Jul-19 07:14 PM";"std::vector is the only thing that seems very useful";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:14 PM";"Yes but we can remplace it with full C code easyli if you target C";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:14 PM";"i got the hooks into the main protocol flow and all the nSPV specific things will be in komodo_nSPV.h";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:14 PM";"We can totally drop the C++ part";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:15 PM";"yes, I can just port the std::vector to C ptrs, for now, just trying to get things put together and working as a reference implementation";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:15 PM";"If we want we can do that: https://github.com/doom/ceeds/blob/master/include/ceeds/vector.h";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:15 PM";"the daemon side will be there in all the nodes";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:16 PM";"thanks, ceeds seems handy";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:16 PM";"It's my best friend C library";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:16 PM";"is an expert";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:16 PM";"He write this library to have some usefull container in C";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:16 PM";"and dropping C++";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:17 PM";"so you have basis : string, vector, map, set etc";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:17 PM";"binary_heap, bitmanip";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:18 PM";"i will just write the reference and get it working. after that we can worry about making it pure C, porting to java, etc.";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:19 PM";"Yes, great";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:19 PM";"i think with the NSPV_INFO, UTXOS, NTZS, NTZPROOF, TXPROOF query messages, that will allow a client to have all the data needed to create and sign rawtransactions";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:19 PM";"but pretty sure some of the structures will need tweaking, at least they should be reasonably close";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:20 PM";"there is a rate limit per peer built in, so the nSPV client needs to make sure it doesnt go too fast or it just wastes query";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:20 PM";"Yes i just link you this code to have an idea";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:21 PM";"We need to make a measurement for the performance of `nSPV` no ?";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:21 PM";"so, get basic chain info, get a list of all your utxo. for each utxo, find the before/after notarizations. then aggregate the data and make requests for the notarization proofs, along with txproofs";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:22 PM";"that gets all the data needed to validate the rawtx, blockheaders and you can create transactions ready to spend. though it doesnt deal with mempool, it is a good practical first iteration";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:22 PM";"i think the limit for nSPV will be the number of peer connections per full node. it isnt bandwidth intensive";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:23 PM";"we can definitely stress test things to see what sort of multiplier each full node can get, i estimate at least 1000x, if not 10000x";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:23 PM";"Yes stress test will be usefull here";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:24 PM";"aha! i can just add any txid in the mempool to the UTXOS query";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:24 PM";"How much number peer of connections did you expect";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:24 PM";"the default caps to 155 or something like that.";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:24 PM";"so we will need to tweak the networking limits a bit";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:25 PM";"hmm, seem's fair";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:26 PM";"currently, i think all peers are counted the same. we need to allow much higher numbers of nSPV peers";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:27 PM";"what the mean of the `n` in `nSPV` ?";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:27 PM";"notarized SPV";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:27 PM";"Of course";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:27 PM";"Since is all based on notarization";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:27 PM";"dpow is an incredible consensus man";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:28 PM";"i'm impressed.";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:30 PM";"now that the p2p networking is basically working, (i have a testnet doing request/response with stub messages) i just need to connect it to the actual rpc functionality and then the cli nSPV client would be able to return notarized balance, list of utxo and their values. Given that using normal createrawtransaction and signrawtransaction, sendrawtransaction, you can construct sends. since all the actual nSPV clients will be doing their own local signing, probably no need to do much fancy operations, maybe a nSPVsend rpc call to just simplify the rawtx stuff";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:30 PM";"then with a working reference nSPV client and a working set of full nodes deployed, validating other nSPV implementations becomes much much easier";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:31 PM";"You will add an optional parameters in those rpc call ?";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:31 PM";"Specifying nSPV ?";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:31 PM";"i will make a special nSPVsend that will work similar to sendtoaddress";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:31 PM";"but it will only work in nSPV=1 nodes";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:31 PM";"so a new rpc call";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:31 PM";"ok i get it";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:31 PM";"yes, much better to keep things separated";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:32 PM";"Yeah, it's better actually";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:33 PM";"i think there will only be a few rpc calls, will know more when i put it all together, but something like nSPVlogin and nSPVbalance,maybe nSPVhistory, nSPVsend, nSPVtxinfo";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:35 PM";"nothing will be saved to disk";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:35 PM";"you will push in the same branch ?";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:35 PM";"yes, it will all go into nSPV branch";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:35 PM";"Ok";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:36 PM";"i will follow the code update";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:36 PM";"i am aiming for a working cli nSPV wallet by this weekend";"";"üëÄ (1)";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:37 PM";"nSPV will distrupt the blockchain industry, lot of people don't know yet";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:37 PM";"But it's a huge improvement...";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:37 PM";"3 to 5 seconds from start to being able to send a valid tx";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:38 PM";"basically a stateless wallet tech as it is fast enough to reinitialize everything with each login";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:39 PM";"if you have 10,000 utxo, that will take a long time with just one full node, but once there are 100+ fullnodes, it would initialize in a couple minutes";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 07:39 PM";"and 10,000 utxo is just too many, most wallets will just have a few utxo";"";"";
"206445134122844170";"Slyris#2880";"02-Jul-19 07:40 PM";"you are right";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 09:05 PM";"i verified that nSPV capable full nodes and normal can coexist. nSPV client nodes will just reject any full node or other client node";"";"";
"455741312273219595";"jl777c#5810";"02-Jul-19 09:06 PM";"this means we can test with existing coin p2p networks, without any hardfork";"";"üëç (1)";
"455741312273219595";"jl777c#5810";"03-Jul-19 02:32 PM";"@TonyL latest version is working, at least the nSPV client requests blockchain info and addressutxos info. inadvertently i had an address with 12,000+ utxo, but it seemed to work nearly instantly";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 02:32 PM";"i have serialization/deserialization done for all the initial structs, which i think will get us 90%+ of the way to a working cli nSPV wallet";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 02:33 PM";"which is the next step, to add rpc calls for basic wallet functions";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 02:33 PM";"at first it will work as api wallet and not bother with merkle validations, but with all the data available, it would just be a matter of adding the checks to make it secure";"";"";
"349903748539351042";"allbits#5898";"03-Jul-19 03:23 PM";"When you get the working nSPV cli wallet, is that something a noob like me could test?";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:31 PM";"yes";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:31 PM";"the commands will be very limited";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:32 PM";"login, getbalance, send";"";"";
"349903748539351042";"allbits#5898";"03-Jul-19 03:46 PM";"Cool :)

SPV wallets are far more secure than API lite wallets, right?";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:53 PM";"yes";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:54 PM";"nSPV wallet is basically the same security level as a full node";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 03:54 PM";"the only issue is that it needs to poll random nodes to find out what utxo it has, but if you track that locally, there is no need to rely on external nodes";"";"";
"349903748539351042";"allbits#5898";"03-Jul-19 04:03 PM";"Thanks";"";"";
"371114647052615681";"Mylo#8306";"03-Jul-19 05:19 PM";"how will nodes allow nSPV clients to connect?  is it a different RPC interface?";"";"";
"371114647052615681";"Mylo#8306";"03-Jul-19 05:20 PM";"or is it http?  sorry for noob q";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:38 PM";"new p2p messages";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:38 PM";"it is already coded to allow the nSPV capable nodes to be mixed with older nodes. no hardfork needed";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:41 PM";"existing coin network will support the nSPV nodes";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:42 PM";"look into normal headers sync SPV clients";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:54 PM";"@Slyris the p2p networking is testing out well, i got all the (de)serialization coded for all the structures and the fullnode side is 99% done with setting them, even validated two of the messages is going from client -> fullnode -> client and the data seems reasonable. next will be to properly request all the messages from the client side and writing a simple wallet rpc -> client side code.
 on track for simple reference cli wallet by the weekend, probably wont get all the merkle validation done as that is tricky, but at least the data will be flowing from fullnode to superlite, so we can get bandwidth loading tests";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 05:55 PM";"its up to 1000 lines of code though... probably a few bugs crept in, but when i validate the data client side i should find most all of those issues. i did remove the internal usage of std::vector and just made it allocated/freed";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:27 PM";"i will look at it thank's¬†@jl777c";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:36 PM";"@jl777c You have to much verification that a pointer is not null for free";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:36 PM";"Is not needed in c : https://stackoverflow.com/questions/6084218/is-it-good-practice-to-free-a-null-pointer-in-c";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:37 PM";"according to: http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:37 PM";"https://github.com/jl777/komodo/blob/nSPV/src/komodo_nSPV.h#L308 you can safely remove the verification here inside the first if statement";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 06:39 PM";"i am not 100% convinced it holds true for all C compilers on all OS";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:39 PM";"It is since it's the standard";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 06:39 PM";"it is a defensive check, doesnt harm the logic";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:40 PM";"Yeah";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:40 PM";"no problem";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:40 PM";"and also i have a question about here: https://github.com/jl777/komodo/blob/nSPV/src/komodo_nSPV.h#L356";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:40 PM";"Is it something like if the pointer is null you dereference it ?";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 06:40 PM";"fprintf(stderr,""implement NSPV_getnotarization_txid\n"");";"";"";
"455741312273219595";"jl777c#5810";"03-Jul-19 06:40 PM";"that is the one function not implemented yet";"";"";
"206445134122844170";"Slyris#2880";"03-Jul-19 06:40 PM";"Ah ok , was afraid";"";"";
