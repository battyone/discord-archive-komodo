AuthorID;Author;Date;Content;Attachments;Reactions;
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:49 PM";"right, but to twitter";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:49 PM";"jl777 and sawlysawly are the same";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:49 PM";"both are evil anons";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:50 PM";"I don't agree. Anon-ness is a red-herring. It's code review.";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:50 PM";"Code review is fucking boring and must be done. I have had jobs where 50% of my time or more, as a dev, was code review";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:50 PM";"Big companies spend massive amounts of time on it, because it's needed to avoid disasters";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:52 PM";"@jorian nobody reads tweets that talk about code review, but memepics, those get read";"";"";
"242635006516658197";"jorian#4555";"06-Jun-19 03:52 PM";"i think you're the one insulting that guy with a meme";"";"";
"242635006516658197";"jorian#4555";"06-Jun-19 03:52 PM";"but who cares";"";"";
"242635006516658197";"jorian#4555";"06-Jun-19 03:52 PM";"the guy is a nobody";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:53 PM";"memes are not the enemy, lol";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:53 PM";"`how does their SSDLC procedure work?`";"";"";
"242635006516658197";"jorian#4555";"06-Jun-19 03:53 PM";"it doesn't :troll:";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:53 PM";"well, it's more complex";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:53 PM";"Look at our c++ full node deps. Those are much more well known and controlled and reviewed";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 03:54 PM";"it's that this particular gui wallet deps did not have a strict review process";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 04:18 PM";"`i'm referring to this
and he has a point.`
`to us, jl777 is not anon anymore`
It's likely that someone has maybe looked me up, but other than reputation and comment history no one knows who I am and even less when I contributed code to BarterDEX GUI.
There's a valid point to not having checked code, but *who* the code came from is all but about moot";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:20 PM";"@ComputerGenie 👴🏼📢 i assume you are psyops for NSA because, fuck, you are good";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 04:21 PM";"LOL";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:21 PM";"I don't know the odds, but 3 college friends went into military psy-ops and that freaked me out";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:22 PM";"https://twitter.com/dukeleto/status/1136669446980939777";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:22 PM";"@jorian i took your advice, no meme";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 04:22 PM";"P.S. the ""god"" of cryptocurrency is *still* anon";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 04:24 PM";"https://twitter.com/RealCompGenie/status/1136670136843329545";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:26 PM";"those people aren't cryptocoin people";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:26 PM";"they are infosec people, and may tell you that BTC is a ponzi scam @ComputerGenie 👴🏼📢";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 04:26 PM";"cultures are clashing";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 04:27 PM";"`and may tell you that BTC is a ponzi scam`
As long as Core wants it to be a commodity and not a currency, it is (but that's a whole other topic 😜 )";"";"";
"269038612408958976";"klein#5233";"06-Jun-19 04:39 PM";"@dukeleto  let there be memes";"";"";
"347922216429813760";"grewalsatinder#9653";"06-Jun-19 04:58 PM";"according to that tweet, let's remove all code from Satoshi Nakamoto to get stated with.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:37 PM";"Have the exact details of the exploit been released yet?";"";"";
"423176312354635779";"gcharang#6833";"06-Jun-19 05:38 PM";"@Andy have you seen this? https://blog.npmjs.org/post/185397814280/plot-to-steal-cryptocurrency-foiled-by-the-npm";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:39 PM";"Yes, but hasn't the malicious package been removed from npm?";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 05:40 PM";"now it has, but the damage is already done";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:41 PM";"I know, I would like to understand how they did it. The bitpay-exploit code from last November is available, so you can see how they did it. I would like to do the same here so we can protect ourselves from it in the future.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:42 PM";"For example the event-stream vulnerability targeted their build step specifically";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 05:44 PM";"the module referenced an agama ""internal"" variable that had the passphrase, i guess with javascript there are no local variables";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:47 PM";"Interesting";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:48 PM";"Do you have a link to the wallet that was affected? I would have assumed that build tools nowadays wrap everything in an anonymous function, in which, as far as I know, variables cannot be overwritten.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:48 PM";"I mean the actual repo";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:49 PM";"I found many different repos, but some were labelled as “desktop” so I’m a bit confused";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 05:49 PM";"i dont have any copies, but i dont deal with the website";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:50 PM";"Ok";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:51 PM";"Maybe it’s good to let a bit of time pass, but I hope you release the code at some point to help others protect themselves.";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 05:52 PM";"i am sure someone around here has backup copies";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 05:53 PM";"That would be amazing. And if not publically, I would appreciate if someone could send me a private copy. I’m planning a major overhaul of our complete app security wise, and I would like to consider all attack vectors.";"";"";
"423176312354635779";"gcharang#6833";"06-Jun-19 05:59 PM";"@Andy 
https://github.com/KomodoPlatform/EasyDEX-GUI
https://github.com/KomodoPlatform/Agama
https://github.com/KomodoPlatform/agama-wallet-lib";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:02 PM";"@Deleted User 

> @Bryan_Beus problem is not the language, we could be using python, go, or elm, the problem would still remain, because the root cause is the usage of the package manager without proper supervision.

Right, I understand. JS is the language i know best (which isn't saying much).

The language is fairly easy to use. I don't get why people complain about it, unless they're talking pre-ES6.

Compared to C++, JS is a cinch.

But the way we've built the JS environment is the issue, like you said. 

I'd be interested to look into WebAssembly. I know the basic talking points about it, but am not far enough into C++ yet to actually use it. 

I wonder if the upcoming C++ package manager will make C++ as big of a secure risk...";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:03 PM";"does javascript support local variables? or static?";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:03 PM";"@gcharang thanks, now only the actual code of the malicious package is missing";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:03 PM";"having all the variables global is a giant risk";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:04 PM";"Usually variables are scoped to the function";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:04 PM";"but all are globally accessible?";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:04 PM";"Not that I know of";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:05 PM";"If you do 
x = 5
Then yes";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:05 PM";"@jl777c 

It supports global variables in the browser.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:05 PM";"But if you do
var/let/const x = 5 then not";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:06 PM";"I think you scope it to the `window` object or something. Can't remember, never used it.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:06 PM";"If you simply write x=5 then it’s equivalent to window.x=5 which is global";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:06 PM";"Of course, browsers would have to have security checks against that.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:06 PM";"If you use a linter it will throw an error";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:06 PM";"I think I played around with this like a year ago or something.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:07 PM";"The reason this us allowed is because all global functions belong to the window object";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:07 PM";"ahh";"";"";
"369608312955731968";"Bryan_Beus#6442";"06-Jun-19 06:07 PM";"okay";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:07 PM";"So if you do
new Promise()
It’s actually calling
new window.Promise()";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:07 PM";"So it’s for convenience I guess";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:08 PM";"But I’m quite curious how a variable defined there ended up in the global space";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:08 PM";"I’ll check that when I’m on the computer";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:09 PM";"I guess once you have a reference to a sensitive variable it’s over anyway";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:09 PM";"Yeah";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:10 PM";"so what happens if an upstream module is updated with a critical security update to path a vulnerability?";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:10 PM";"if you update right away, a real exploit can sneak in";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:11 PM";"if you dont, you are exposed to the announced vulnerability";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:11 PM";"You have to lock them to the exact version.";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:11 PM";"so the ""critical update"" is just a minor update";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:12 PM";"is it possible to change the code without changing the version?";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:12 PM";"You have to manually update every dependency";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:12 PM";"but modules are allowed to make requests over the internet";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:13 PM";"what stops it from getting code externally? at first it is benign";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:13 PM";"so version numbers dont matter";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:13 PM";"everyone is all gungho about all the automated build stuff...";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:13 PM";"Well a hacker will certainly play by the rules when trying to exploit an app 😉";"";"";
"455741312273219595";"jl777c#5810";"06-Jun-19 06:14 PM";"with iguana, i wrote virtually everything from scratch";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:14 PM";"You cannot assume that a patch version upgrade is just that. Unless it is enforced by the ecosystem (like it is in elm).";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:15 PM";"The important question is if the dev can change the code that is on npm after it has already been released";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:15 PM";"Because then even locking to a fixed version won’t help";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:16 PM";"But trusting code hosted on npm is a bad idea anyway. Because nobody reviews the minified code there... people just look at the git repo, but those codes dont have to match";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:18 PM";"I keep coming to the conclusion that the ONLY way to be TRULY safe, is if you copy paste the source code of every singe dependency and sub dependency into your app by hand and review it. Which is just impossible if you don’t have a whole team of developers dedicated to doing that...";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 06:18 PM";"yes it is scary";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:20 PM";"The problem is that many js repos need to be “built” somehow";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:21 PM";"Typescript, babbel, etc";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:21 PM";"But if npm built all the dependencies themselves that would already be a massive improvement";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 06:23 PM";"for package, you can always lock to a specific commit of a dependency (albeit that doesn't change sub-dependencies  from doing whatever)
i.e.:
`  ""merkle-bitcoin"": ""git+https://github.com/joshuayabut/merkle-bitcoin.git#3606036e3a44aa46e5a16cc6d7beea8e49dec8ef"",`";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 06:24 PM";"very often, you inherit thousands of nodeJS dependencies";"";"";
"474206298427097099";"ComputerGenie 👴🏼📢#7004";"06-Jun-19 06:25 PM";"yeah, that what I mean that you cannot stop while still using them";"";"";
"365714438864633856";"dukeleto#7326";"06-Jun-19 06:25 PM";"just from the start, I had a 10,000 line package-lock.json for Hush-NG code I inherited";"";"😂 (1)";
"365714438864633856";"dukeleto#7326";"06-Jun-19 06:25 PM";"most people are in that kind of situation";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:31 PM";"As mentioned before, the problem is often that js lacks a lot of basic/useful features, so instead of programming it over and over again, you just include a package that does that specific task well. And then you end up with 1000s of small dependencies that is impossible to review.";"";"";
"136447902238244864";"Andy#1801";"06-Jun-19 06:33 PM";"I would actually prefer if there is a huge single library with 0 dependencies that has all the code in one place. So instead of having 1000 small libraries of which the changes are almost impossible to track, you would have 1 huge library with 1000 smaller files. And then you pretty much just have to review that one. Still a pain in the ***, but I would personally prefer that.";"";"";
