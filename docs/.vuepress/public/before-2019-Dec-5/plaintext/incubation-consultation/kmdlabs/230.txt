==============================================================
Guild: Komodo
Channel: kmdlabs
Topic: Please read pinned messages
Messages: 100
Range: before 05-Dec-19 12:00 AM
==============================================================

[18-Jan-19 10:05 AM] CrisF#3405
@Mylo Hi, I don't quite follow this part, `bugs, small rewards from dev, bigger rewards from labs.` Does this mean rewards coming from the escrow?

[18-Jan-19 10:09 AM] blackjok3r#3181
Bugs bointies were always supposed to be new coins created.  A lot of external people have sauid that devs should have to buy labs and put up bounties... But my proposal makes creating the chain cost LABS, and bug bounties cas still be new created coins. I liek a time lock though... maybe, half of it is time locked. Just prevents people claiming bug bounty then dumping all the LABS right away.

{Reactions}
parrot 

[18-Jan-19 10:13 AM] CrisF#3405
Ahh, I see.

[18-Jan-19 10:13 AM] CrisF#3405
That makes more sense.

[18-Jan-19 10:17 AM] CrisF#3405
Trying to burn through the fog and run through the implications of the time lock.  Will take a bit, but see a few advantage to the LABS ecosystem.

[18-Jan-19 11:30 AM] blackjok3r#3181
I think its a little hacky, but I have managed to compile VHT2 branch using VerusHashV2, from my understanding this is an unused Algo, so there are no GPU or FPGA miners for it. Only the Daemon CPU miner. For 0 Block reward chains  this will be perfect. To merge this to real KMD it needs to be done a diffrent way, because otherwise LUMBER wont sync. So for now I will just leave it in VHT2 branch and launch a test chain with it.

{Reactions}
üî• 

[18-Jan-19 11:31 AM] jl777c#5810
would be good to have a VERUSHASH2 algo that we can add to the -ac options

[18-Jan-19 11:32 AM] blackjok3r#3181
yes it will .. if this works as expected I will get mike to help me add it. HE did say he would help with this. It was his suggestion to use V2. üòÉ

[18-Jan-19 11:33 AM] blackjok3r#3181
Wont be for a while though going to take a few days off after this.

[18-Jan-19 11:34 AM] jl777c#5810
no giant rush just one of those cool things to have

[18-Jan-19 11:34 AM] jl777c#5810
and should pave the way for adding more and more hashalgos

{Reactions}
üòé (3) 

[18-Jan-19 11:37 AM] blackjok3r#3181
This will also help with the difficulty problem, we can just set V2 to use a much higher min diff in the chain params.

[18-Jan-19 11:38 AM] jl777c#5810
will we need custom miner functions for each algo?

[18-Jan-19 11:38 AM] jl777c#5810
or just use one of the two existing ones, depending on details?

[18-Jan-19 11:39 AM] jl777c#5810
mindiff, which mining function, name, #define value, maybe that is about all that is needed for each new algo

[18-Jan-19 11:41 AM] jl777c#5810
so we should define a struct with all the algo specific strings and values, function name. then for a new algo, it is a matter to add a new structure element and link in a file with all the required code

[18-Jan-19 11:59 AM] blackjok3r#3181
I think most algos can be added to the Verus Miner ... it seems like this was made that way from the start, the only proiblem is defining of the hash writer...

[18-Jan-19 12:02 PM] blackjok3r#3181
V2 is working fine for me, the hash rate is the same too. Still crazy high.

[18-Jan-19 12:55 PM] ComputerGenie üë¥üèºüì¢#7004
`people can also submit bug bounty claims if they can show a reproducible issue
I think bug bounty should only be paid once fixed
so the tester would have to work with the dev to fix it before they receive anything
that way if dev abandons it, we aren't making coins for bug fixes in their abandoned contract
also maybe time locks for the bounty`
@Alright If I'm reading that correct, I'd say that the timelock is a must; otherwise, what's to stop the dev from abandoning it just to not pay anything?

{Reactions}
ü§î 

[19-Jan-19 01:09 AM] blackjok3r#3181
good point.

[19-Jan-19 01:40 AM] Alright#0419
@ComputerGenie üë¥üèºüì¢ not sure I understand the question

[19-Jan-19 01:41 AM] Alright#0419
maybe you're thinking it's the dev paying the bounty? That was never the intention. STAKED started as a way for devs to get testing for relatively cheap

[19-Jan-19 01:41 AM] Alright#0419
bug bounties are meant to be baked into coin emissions

[19-Jan-19 01:55 AM] CrisF#3405
Hi, would it be possible to run through a couple of usecases for LABS?

[19-Jan-19 01:56 AM] CrisF#3405
(examples)

[19-Jan-19 01:57 AM] CrisF#3405
It might help to get a clearer understanding of how the system works.

[19-Jan-19 01:57 AM] CrisF#3405
(for me)

[19-Jan-19 01:58 AM] Alright#0419
dev creates contract, isn't 100% confident it's ready for production use, we put it on the cluster and try to break it. Dev gets relatively cheap testing. We get a new contract.

[19-Jan-19 01:58 AM] Alright#0419
that's really what it boils down to IMO

{Reactions}
üòé 

[19-Jan-19 01:58 AM] Alright#0419
but of course plenty of other use cases

[19-Jan-19 01:59 AM] Alright#0419
have an idea for something cool, but it's not worth creating it's own coin over?

[19-Jan-19 02:00 AM] CrisF#3405
An example. (Something easy to start with, like something we've already done.) Ahh...

[19-Jan-19 02:03 AM] CrisF#3405
Dice for example.
I have an idea to use the dice cc to make a chain.  Want to test a lot before going live.
First I contact Labs on Discord...

[19-Jan-19 02:08 AM] CrisF#3405
What steps would I take then?

[19-Jan-19 02:10 AM] CrisF#3405
( I would want bug hunting, user feedback, and possibly stats)

[19-Jan-19 02:11 AM] Alright#0419
Do you recall all the testing that happened in #kmdice channel after launch?

[19-Jan-19 02:12 AM] CrisF#3405
Yes

[19-Jan-19 02:12 AM] Alright#0419
I don't believe it's practical to create a brand new coin for each contract

[19-Jan-19 02:12 AM] Alright#0419
So imagine what happened in #kmdice, all that testing, all those hard forks

[19-Jan-19 02:14 AM] CrisF#3405
Yes, that's what I'd like to avoid :abusedsmily:

[19-Jan-19 02:16 AM] CrisF#3405
In this case I'm wondering what steps I'd go through to iron that out on Labs before going live.

[19-Jan-19 02:16 AM] Alright#0419
that's the point, we don't need to avoid that

[19-Jan-19 02:17 AM] Alright#0419
it's a huge hassle for any other coin, but it's a slight nuisance for us

[19-Jan-19 02:21 AM] CrisF#3405
I'm missing something very basic, haha.  Will have a think üí°

[19-Jan-19 02:23 AM] Alright#0419
@CrisF do you see what I'm saying here?

[19-Jan-19 02:24 AM] Alright#0419
if a coin didn't have a fungible cluster, every hard forking change in any contract would require the entire network to hardfork

[19-Jan-19 02:24 AM] Alright#0419
we segregate the contracts to specific chains, so only that chain has to hard fork

[19-Jan-19 02:25 AM] Alright#0419
so if we were developing 5 contracts in parallel without a  fungible cluster, we'd be hard forking every week üòÇ

[19-Jan-19 02:27 AM] CrisF#3405
Yeah, I misunderstood.  You meant it's better to do that in Labs beforehand?

[19-Jan-19 02:30 AM] Alright#0419
Yes

[19-Jan-19 02:30 AM] Alright#0419
aiming to be a testnet for all assetchains pretty much

[19-Jan-19 02:30 AM] Alright#0419
that is incentivized

[19-Jan-19 02:30 AM] CrisF#3405
That's what I was thinking originally.

[19-Jan-19 02:31 AM] CrisF#3405
I would like to understand the procedure for going about that better.

[19-Jan-19 02:32 AM] Alright#0419
make a contract, PR it to stakedchain repo in it's own branch, launch a chain

[19-Jan-19 02:34 AM] Alright#0419
the result of being a testnet for all assetchains is that users will be able to use the contract while it's still being developed as opposed to developing the contract fully then putting it into production

[19-Jan-19 02:36 AM] Alright#0419
dice had been usable for months prior to it being properly tested by KMDice

[19-Jan-19 02:37 AM] CrisF#3405
I've got that part.
I read the steps from the posts and on github.  I was thinking and example run through of the steps to set up that pre-production testing might help me.  How to set up the testing on Labs.

[19-Jan-19 02:37 AM] Alright#0419
I think we just need to do it then document the process

[19-Jan-19 02:38 AM] Alright#0419
we can do it immediately after launch with some example

[19-Jan-19 02:38 AM] CrisF#3405
Yes, that's where an example might help.

[19-Jan-19 02:38 AM] Alright#0419
maybe just editing a contract slightly then launching a chain with that unique edit

[19-Jan-19 02:39 AM] Alright#0419
We could start documenting it now, but I think it'd be best to wait until we've done it at least once

{Reactions}
üëç 

[19-Jan-19 02:44 AM] Alright#0419
After launch, we can make a chain that has a faucet with no limit on how many times a pubkey can do it along with a larger amount per faucetget

[19-Jan-19 02:45 AM] Alright#0419
that would be the simplest example I believe and likely get some people interested by letting them directly earn some coins

[19-Jan-19 02:45 AM] Alright#0419
Can test the process of killing a chain with it as well

[19-Jan-19 03:28 AM] Alright#0419 (pinned)
@LabsAssistant we're going to use this as the definitive place for proposals. Please make your own or respond to our's if you have anything to add. 
https://github.com/StakedChain/StakedNotary/issues/22

{Embed}
https://github.com/StakedChain/StakedNotary/issues/22
LABS Proposal ¬∑ Issue #22 ¬∑ StakedChain/StakedNotary
KMD LABS: Proposal LABS Main Chain: 51% PoS 49% PoW - Equihash, same as KMD. ac_founders=1440 - Pays notary node multisig address every 24H 33% of the supply split between all nodes, based on notar...
https://avatars3.githubusercontent.com/u/30971146?s=400&v=4

[19-Jan-19 03:29 AM] Alright#0419
can't keep losing ideas to discord chats, need something we can look back at in a year

[19-Jan-19 03:30 AM] smk762 -  dracocanis ominator#7640
is there also a provision  for testing implementations of existing contracts?

[19-Jan-19 03:31 AM] Alright#0419
Yes of course

[19-Jan-19 03:31 AM] Alright#0419
maybe we should rip out contracts from main chain for the time being

[19-Jan-19 03:31 AM] Alright#0419
put all the existing ones onto a single chain

[19-Jan-19 03:32 AM] smk762 -  dracocanis ominator#7640
cool, just confirming. might hold a `hack the hound` comp at some stage

{Reactions}
3040_kingpeepo 

[19-Jan-19 03:32 AM] Alright#0419
üòÉ

[19-Jan-19 03:33 AM] smk762 -  dracocanis ominator#7640
Dragonhound has been a bit sidetracked lately while working on other stuff, but the other stuff is tangential and works towards the while label variation of dragonhound for other use cases.

[19-Jan-19 03:34 AM] smk762 -  dracocanis ominator#7640
hopefully the whiltelabelling will be the means to fund the hardware costs of dragonhound kits üòÉ

[19-Jan-19 03:34 AM] Alright#0419
Will you launch a chain for it?

[19-Jan-19 03:35 AM] smk762 -  dracocanis ominator#7640
it's not reallly neccesarry, but probably will just to keep from spamming someone else's chain lol

[19-Jan-19 03:36 AM] smk762 -  dracocanis ominator#7640
I've been on the gui side of things lately, and a bit of legacy db backend. about to get back into oracles to link it all together

[19-Jan-19 03:37 AM] smk762 -  dracocanis ominator#7640
one thing I've been thinkning was how to make oracles readonly unless authorised

[19-Jan-19 03:38 AM] smk762 -  dracocanis ominator#7640
might mean creating a fork of the contract?

[19-Jan-19 03:38 AM] Alright#0419
yep

[19-Jan-19 03:38 AM] Alright#0419
not sure I understand what that means though

[19-Jan-19 03:38 AM] Alright#0419
aren't they already read only?

[19-Jan-19 03:39 AM] Alright#0419
you want to prevent other people from registering on an oracle?

[19-Jan-19 03:39 AM] smk762 -  dracocanis ominator#7640
not sure, I've registered more than once on the same oracle, bt on same node so maybe thats ok

[19-Jan-19 03:39 AM] smk762 -  dracocanis ominator#7640
but yeah. lock rego to auth users.

[19-Jan-19 03:40 AM] smk762 -  dracocanis ominator#7640
avoid non-pertinent oracles from being created

[19-Jan-19 03:40 AM] smk762 -  dracocanis ominator#7640
or existing oracles being written to with junk data by unauthed users

[19-Jan-19 03:40 AM] Alright#0419
would be useful, creator of the oracle could register with the creator pubkey and be able to update who can register from that pubkey

[19-Jan-19 03:40 AM] Alright#0419
possibly üòõ

[19-Jan-19 03:41 AM] Alright#0419
although, you could also just ignore them

[19-Jan-19 03:41 AM] smk762 -  dracocanis ominator#7640
I'll have to go deep when I have some rabbit hole time spare...

[19-Jan-19 03:41 AM] smk762 -  dracocanis ominator#7640
concern is chain being spammed into oblivion

[19-Jan-19 03:41 AM] Alright#0419
think you could implement something like that in a dapp with existing contract

[19-Jan-19 03:42 AM] Alright#0419
so dapp checks creator pubkey oraclessamples for all pubkeys to check

[19-Jan-19 03:42 AM] Alright#0419
ignores the rest

[19-Jan-19 03:42 AM] smk762 -  dracocanis ominator#7640
dapp already filters to what's pertinent, but if too many oracles on chain it might slow thiungs down

[19-Jan-19 03:43 AM] smk762 -  dracocanis ominator#7640
bit messy too, I like clean...

[19-Jan-19 03:44 AM] smk762 -  dracocanis ominator#7640
alternatively, a way to kill oracles ü¶å

{Reactions}
üèπ (2) 

