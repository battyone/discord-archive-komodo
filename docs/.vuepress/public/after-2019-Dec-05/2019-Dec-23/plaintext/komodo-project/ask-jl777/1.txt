==============================================================
Guild: Komodo
Channel: ask-jl777
Topic: Ask questions about the core tech here, but not questions about prices or personal questions or GUI and  please don't DM JL777.
https://dexstats.info/richlistlookup.php?address=RLVzC4tr9cNKvuw2z4m8KuMfZURwCehx55
https://medium.com/@jameslee777
After: 22-Dec-19 12:00 AM
Before: 23-Dec-19 12:00 AM
==============================================================

[22-Dec-19 01:37 AM] Mylo#8306
With FSM CC will it be possible to ‚Äúeasily program‚Äù or chain together some underlying logic?
For example:
Scan the UTXO set and provide each owner of COIN a tokensCC equivalent value, which can be used for voting for instance.

{Reactions}
PeepoThink

[22-Dec-19 04:27 AM] CrisF#3405
Hi,
Regarding the **dual-daemon**, could that functionality be added to an existing chain, or would it require a pair of newly created chains?

[22-Dec-19 05:18 AM] artik123#2884
I was contemplating if to write this, but I always believe in trying to improve, 
tackle issues and facing the hard problems heads on is the best way to go. 
This is the way to success, at least as I know it. 

The thing is that most of the time the market is not dumb, and there is a difference between projects rank #2 and #202.

In the past 2.5 years there has been a tremendous work here and I'm personally amazed. 
Actually this is the project that I'm most curious to see how it unfolds.

It's grass root project made by an unimaginably hard work/shear force of you and a lot of community effort, 
and this project is extremely well managed (Me personally, I would give decisions that has been made here 10 out of 10).
It also seems that the market does appreciates the work that has been made.

I personally believe that multichain and interoperability is the way to go and the market 
already placed Cosmos #16 and probably PolkaDot will have their place. 
I also think that the technology here is much more promising.

My personal belief is that In order for this project to grow higher it has to swing the pendulum, 
and when that happens, market cap will follow.

But I think that the way it is set right now, is in a way, still limited, 
and in current incarnation there is a limit right now on how far it can go.

And the thing that I wish to talk about is the consensus modules. 
I fully support them and believe that the consensus modules expand and give tremendous capabilities 
to the platform and are part of the DNA of this project. They open the door for more developers to build on top of them, 
but imo they are still a limiting factor to the number and kind of people it attracts.

The way I see it, c/c++ devs are usually more hardcore, savvy older guys 35-40+

Take bitcoin for example, just to name a few... Jeff Garzik, Greg Maxwell, Gavin Andresen,

[22-Dec-19 05:18 AM] artik123#2884
Wladimir van der Laan, Adam Back and also probably Satoshi himself.

Same for Charlie Lee (litecoin).

While this stuff is good for a coin, I think that it's a different story for a platform.

And also the people that tend to click with this project and build on top/fork of it are more savvy people 
i.e. Verus, Hush, KmdLabs etc. I'm not saying that this is bad, it's actually good, 
but the number of 25 year old developers wishing to experiment with blockchains is much bigger.

I think that a platform has to reach as many developers as possible, and that the younger generation 
view c/c++ a little bit older generation, hardcore type of programming languages and I don't think that it is appealing enough for them. 

The way it is construct atm, forces devs wishing to build smart contracts on top of this platform to become some sort of core developers.

I think that in order for this project to swing the pendulum it has to gain higher dev adoption 
and have a lot more experimental stuff going on top of it, and it's kind of hard for me to see hundreds or thousands 
chains made by c/c++ developers experimenting with the software. 

I actually think that in order to see hundreds or thousands developers there has to be a clear separation 
between kmd c/c++ core developers and other app developers building on top of it (Just like in other platforms, eos, eth etc.). 
Imo they are really not the same kind of people, not the same kind of vibe and not the same kind of programming languages. 

I even think that it is better to shield the c/c++ stuff from them...

[22-Dec-19 05:18 AM] artik123#2884
or maybe this project is just meant to be a hardcore devs type of project, I don't know.

(When I'm talking about development, I'm talking about real development in other languages, not just API calls).

Even a project like eos which is developed in c++, immediately developed sdk for different languages like Java, Javascript and Swift.

And since many of the kmd building blocks are already in place and while it has made a very good job 
to lower the barrier with all the komodoplatform documentation, it is still not enough to get a flood of developers.

My first thought was to have a Go wrapper. Since Go is gaining rapid growth and getting a hold at the crypto space. 

Wrapping existing CryptoConditions and placing one click working examples at github. And maybe even wrapping internal c/c++ stuff.

Secondly maybe even enable development on Windows. Many of the developers I know, don't even know one command in Unix...

Maybe others have more ideas.

What's your take on that?

[22-Dec-19 05:28 AM] TonyL#3577
The beauty of CC is that you even no need very special wrapper between daemon and dapp - just issue get calls and receive jsons.  https://github.com/stevenroose/go-bitcoin-core-rpc something like that will work with komodo ‚Äúfrom a box‚Äù and you can build apps very rapidly with human readable easy for understanding rpc calls

{Embed}
https://github.com/stevenroose/go-bitcoin-core-rpc
stevenroose/go-bitcoin-core-rpc
An RPC client for the Bitcoin Core JSON-RPC API in Go (Golang). - stevenroose/go-bitcoin-core-rpc
https://avatars0.githubusercontent.com/u/853468?s=400&v=4

[22-Dec-19 05:30 AM] TonyL#3577
https://github.com/barjomet/slick-bitcoinrpc for python apps let‚Äôs say this rpc client is fine, just two lines of code and you‚Äôre ready to build the apps on top of blockchain

{Embed}
https://github.com/barjomet/slick-bitcoinrpc
barjomet/slick-bitcoinrpc
Just another Python bitcoin-rpc client. Contribute to barjomet/slick-bitcoinrpc development by creating an account on GitHub.
https://avatars1.githubusercontent.com/u/7434416?s=400&v=4

[22-Dec-19 05:36 AM] TonyL#3577
To create new token lets say:
from slickrpc import Proxy
rpc_proxy = Proxy(rpc_creds)
new_token = rpc_proxy.tokencreate(tokenname, supply)
new_token_txid = rpc_proxy.sendrawtransaction(new_token[‚Äúhex‚Äù])

[22-Dec-19 05:36 AM] artik123#2884
I'm not talking specifically about cc calls... I'm more talking about cc developement

[22-Dec-19 05:37 AM] TonyL#3577
Oh, CC development yeah - need some abstraction on top. But its hard to abstract from consensus rules as I understand. Would be interesting if there is solution for it

[22-Dec-19 05:39 AM] artik123#2884
Yep

[22-Dec-19 05:54 AM] polycryptoblog#1173
Dual daemon with an Eth clone could allow developers to transition from the dominant smart contract platform, get their toes wet so to speak

{Reactions}
üëç

[22-Dec-19 05:58 AM] Mylo#8306
Hi @artik123 yes you are correct.  The FSM module may fulfill a bunch of those experimental 20-something devs. I‚Äôve been following the cosmos/tendermint stuff for 6 months and more recently polkadot/substrate.

I have found a few projects that not only issue erc20 for initial distribution, but then use the eth networks (test & main) as the building blocks for their own customizations before moving onto the cosmos & substrate.

There was a community developer that was integrating the embeddable javascript runtime *duktape* but he has since disappeared.  A similarly built python module would be possible, same with go.  These both can call C/C++ from within their environments.

I‚Äôd hazard a guess a rust / substrate CC bridge would also be possible or go/cosmos-sdk.  These would not be kmd core dev projects but some collaboration of solution builders no doubt within the next few years.

{Reactions}
üëç

[22-Dec-19 05:59 AM] CrisF#3405
Thanks for asking these kind of questions and raising these kind of points, @artik123 .

They are important matters that need discussion and consideration to strengthen the project.

{Reactions}
üëç

[22-Dec-19 05:59 AM] artik123#2884
I don't think this solution is good enough. I think about developing cc in other languages from scratch for kmd @polycryptoblog

[22-Dec-19 06:06 AM] polycryptoblog#1173
@artik123  I think a good assumption is that many solidity programmers have a background in other languages.  The idea being that if they start with what they know to be ‚Äúprogramming smart contracts‚Äù  from their prior experience with Eth eventually they will dig deeper and wish to expand functionality via CC in their primary languages.  In the meanwhile we have access to Eth based functionality in our ecosystem directly .  The hard part is getting them(developers)  here and learning a new way of doing things.  I do agree other stuff needs done  like transition tools (wrappers and libraries and stuff ) as well.

[22-Dec-19 06:08 AM] TonyL#3577
CC modules don‚Äôt have much common with solidity smart contracts (CCs aren‚Äôt smartcontracts)

[22-Dec-19 06:11 AM] polycryptoblog#1173
I understand that.  It‚Äôs more about just getting them exposed to how we do things than recruit them at this stage.

[22-Dec-19 06:11 AM] artik123#2884
@polycryptoblog I don't think that eth devs projects migration is a good idea. Eth project is account based and it's a different beast. Moreover I don't think that a developer needs to learn a new language that he is not familiar with at the moment

[22-Dec-19 06:15 AM] polycryptoblog#1173
What I‚Äôm getting at is that even if we had the perfect set of tools ready for developers to develop , we need get them here first.   Eth chain as ‚Äúbait‚Äù is one idea I‚Äôm open to all others

[22-Dec-19 06:18 AM] jl777c#5810
the entire komodod is in C++ and whatever CC module will need to interface to its internals

[22-Dec-19 06:18 AM] jl777c#5810
a CC in C++ automatically does this, just call the function directly

[22-Dec-19 06:20 AM] jl777c#5810
for languages that can call C++ functions, nothing prevents a glue layer that allows this to happen, but it seems like an extra layer with no functional advantage, just allows a different language to be used. maybe it is possible to do in a secure way, and certainly we are open for this to happen. nothing prevents this

[22-Dec-19 06:21 AM] artik123#2884
Yes, I think that thats what I mean. Developing sdk for other languages that Interfacing/abstract c/c++ internals

[22-Dec-19 06:21 AM] artik123#2884
And put examples on github

[22-Dec-19 06:22 AM] jl777c#5810
every single internal function that is wanted to be used will need a glue function, but i dont see why it wouldnt work for a compiled language that is able to call C++ function, like rust, go

[22-Dec-19 06:26 AM] jl777c#5810
i fully support such an effort, though i wont be able to directly help as i am mostly a C coder with a bit of C++

[22-Dec-19 06:27 AM] artik123#2884
üëç

[22-Dec-19 06:35 AM] CrisF#3405
Creating incentive for CC service providers seems useful at some point.

[22-Dec-19 09:48 AM] Tom.T#6920
:2561_feelsevilman:

