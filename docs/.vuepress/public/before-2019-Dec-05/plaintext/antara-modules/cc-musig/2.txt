==============================================================
Guild: Komodo
Channel: cc-musig
Topic: ./komodod -ac_name=MUSIG -ac_supply=100000 -ac_reward=10000000 -pubkey=<yourpub> -ac_cclib=sudoku -ac_cc=2 -addnode=5.9.102.210 &
faucet is funded, do faucetget and sendrawtransaction
Messages: 100
Range: before 05-Dec-19 12:00 AM
==============================================================

[23-Feb-19 07:26 AM] jl777c#5810
just change all occurance of "rogue" to "sudoku"

[23-Feb-19 07:27 AM] jl777c#5810
and remove all  -DBUILD_ROGUE

[23-Feb-19 07:27 AM] gcharang#6833
Will try

[23-Feb-19 07:34 AM] blackjok3r#3181
I had to revert boost to 1.66 to make it build

[23-Feb-19 07:34 AM] blackjok3r#3181
I tried fresh clone and a few other things, but it refused to build with 1.69

[23-Feb-19 07:46 AM] gcharang#6833
@blackjok3r 
```
gcharang@qa-gcharang1:~/komodo/src/cc$ dpkg -s libboost-dev | grep 'Version'
Version: 1.58.0.1ubuntu1
```
mine was 1.58, will update

[23-Feb-19 07:47 AM] blackjok3r#3181
no its a dep in the packages ...

[23-Feb-19 07:47 AM] blackjok3r#3181
https://github.com/blackjok3rtt/komodo/commit/fb462bf7de0248b4c4ce6b17f7faba60891b8a14

{Embed}
https://github.com/blackjok3rtt/komodo/commit/fb462bf7de0248b4c4ce6b17f7faba60891b8a14
update boost · blackjok3rtt/komodo@fb462bf
https://avatars0.githubusercontent.com/u/10762374?s=200&v=4

{Reactions}
👍 

[23-Feb-19 07:47 AM] blackjok3r#3181
I reverted that change

[23-Feb-19 07:47 AM] jl777c#5810
now we have it working with 2 pubkeys, the next step is to get a way to test large numbers and hopefully if we do this via scripts to be able to have others use the scripts. The idea is to make musig a chain that devs use to experiment with cutting edge tech

[23-Feb-19 08:05 AM] gcharang#6833
thanks @blackjok3r  its building after reverting this change: https://github.com/blackjok3rtt/komodo/commit/fb462bf7de0248b4c4ce6b17f7faba60891b8a14

{Embed}
https://github.com/blackjok3rtt/komodo/commit/fb462bf7de0248b4c4ce6b17f7faba60891b8a14
update boost · blackjok3rtt/komodo@fb462bf
https://avatars0.githubusercontent.com/u/10762374?s=200&v=4

[23-Feb-19 08:46 AM] gcharang#6833
@jl777c I understand right now, the daemon can be built with only one of the dynamic modules: rogue or musig, but if in the future daemon is built with both modules present, can `-ac_cclib` take both the modules rogue,musig as parameters and start a chain?

[23-Feb-19 08:50 AM] jl777c#5810
@josephnicholas GMT+8 look at this!
cclib keypair 19
{
  "pubkey": "0afb65560088f40b4deda47bb7ab18c8a4d5f8e66fbc8bbba465e0d517e756ef058cee3fd95a9d18f9be86f56a8b865a3517deb5c713ef9d4dc04c0eba85eeb4c19e9f3ccae0225cdd18456c38ff82ffe25dd2463258049b01fa8da62be209c7ff3ce37a7b6100f886eaba7edde140d55f45ef8552ce92b36d5a9d6a7be291334be1fa8956f1252dbca2a819fa...5bec6e12ff907d5",
  "privkey": "0afb65560088f40b4deda47bb...be5ca23dee075bc586c23aecc3a9926e587cb5448bd0e122316f89918a012356b55f6f92f5d93eb089da7e252e99e3e490c05207de41daf27e80eeab9",
  "result": "success"
}

{Reactions}
yassinkomodo 

[23-Feb-19 08:50 AM] jl777c#5810
evalcode 19 is EVAL_DILITHIUM

[23-Feb-19 08:51 AM] jl777c#5810
@gcharang the idea is that there is a libcc dynamic lib that has all the CC you want in it. there needs to be a sane build process to make this. unfortunately i dont really do build process, i just write code so someone else will need to make it a sane process. the important thing is that N different CC can be bundled into a single libcc

[23-Feb-19 08:53 AM] gcharang#6833
Got it, can `-ac_cclib` take multiple modules as parameters and the chain have all the specifies modules enabled?

[23-Feb-19 08:56 AM] jl777c#5810
the idea is that there is a libcc dynamic lib that has all the CC you want in it

[23-Feb-19 08:56 AM] jl777c#5810
did you understand that part?

[23-Feb-19 08:56 AM] jl777c#5810
so make a single libcc with all the CC you want in it. why would you need to specify multiple modules?

[23-Feb-19 09:00 AM] gcharang#6833
oh , these modules in the libcc will be available along with faucet,dice, rewards just through `-ac_cc`?

[23-Feb-19 09:00 AM] jl777c#5810
all the build in CC and the ones in the libcc are available

[23-Feb-19 09:01 AM] gcharang#6833
Got it

[23-Feb-19 09:01 AM] jl777c#5810
you can even limit which of the built in ones are available with -ac_ccenable=evalcode0,evalcode1,...

[23-Feb-19 09:02 AM] jl777c#5810
in which case only the specified evalcodes are available

[23-Feb-19 09:02 AM] jl777c#5810
plus whatever ones are in libcc if ac_cclib was there

[23-Feb-19 09:02 AM] jl777c#5810
there is not much "smarts" to what is available or not

[23-Feb-19 09:02 AM] jl777c#5810
if it is there and not disabled, it is there

[23-Feb-19 09:02 AM] jl777c#5810
if it isnt there or is disabled, it cant be used

[23-Feb-19 09:03 AM] jl777c#5810
chain creation needs to make sure the specific CC available are the ones they want

{Reactions}
👍 

[23-Feb-19 09:59 AM] Mylo#8306
So cool

[23-Feb-19 10:16 AM] blackjok3r#3181
Almost finished with modified daemon to sign unlimited keys on a single daemon. My cclib compiles. Time add to to my python script to loop X pubkeys. Was actually quite simple, that is provided I can manage to chanmge the -pubkey in runtime without crashing it...

[23-Feb-19 11:04 AM] gcharang#6833
@jl777c 
Response for `cclibinfo`
```
    {
      "evalcode": 18,
      "funcid": "P",
      "name": "musig",
      "method": "combine",
      "help": "pubkeys ...",
      "params_required": 2,
      "params_max": 999999999
    },
```
- whats the description of ` "funcid"`? 
- is it always going to be a character? 
- How is it useful for a RPC user?

[23-Feb-19 12:08 PM] gcharang#6833
@jl777c 

Command:

```bash
./komodo-cli -ac_name=MUSIG cclibaddress 18 0225f1cbbda1a0c406bb8f6dc7a589d88b2f9e28cd4fdb3f59139f8aff1f5d270a
```

Response:

```json
{
  "result": "success",
  "CClibCCAddress": "RKWS7jxyjPX9iaJttk8iMKf1AumanKypez",
  "CCbalance": 2.0977,
  "CClibNormalAddress": "RQHYfxb21ow4Xppt2H9x7k5XMhk7PMbKCc",
  "CClibCCTokensAddress": "RVjvG3or8b8asoYBJua9p97pf3RSpaEhRG",
  "myAddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
  "myCCAddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "PubkeyCCaddress(CClib)": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "myCCaddress": "RPYCYEtS7GAt1W9LvJWXHsndozaA8yy4H9",
  "myCCbalance": 0.0,
  "myaddress": "RUfCUd3UryKJ49baQvSuAs42wakNunvvfT",
  "mybalance": 94.60081561
}
```
What are: `PubkeyCCaddress(CClib)`, `CClibCCTokensAddress`
What is the difference between `myCCAddress(CClib)` and `myCCAddress`

[23-Feb-19 01:31 PM] grewalsatinder#9653
Pinned a message.

[23-Feb-19 01:37 PM] siu - Chainmakers#3920
```./komodo-cli -ac_name=MUSIG cclib combine 18 '["03733107e080036b5c1149dfd5b021f0298f99ece570af0b26c658fe4e1b91886f","021d8a1f5d574b0d878bee392347549728a23facb1178eb5e4c86abe70a9a859e9"]'
error code: -1
error message:
no -ac_cclib= specified
```

[23-Feb-19 01:38 PM] siu - Chainmakers#3920
is there some work being done or something?

[23-Feb-19 01:38 PM] siu - Chainmakers#3920
```{
  "result": "success",
  "CClib": "sudoku",
```

[23-Feb-19 01:38 PM] siu - Chainmakers#3920
afaik im in the correct setup

[23-Feb-19 01:38 PM] siu - Chainmakers#3920
This is the chain im running: ```./komodod -ac_name=MUSIG -ac_supply=100000 -ac_reward=10000000 -pubkey=023ef3d3bf277dcf3c363e41d7a3adfa72b8659c148e108079a268e22717fa9a88 -ac_cclib=sudoku -ac_cc=2 -addnode=5.9.102.210 &
```

[23-Feb-19 01:39 PM] TonyL#3577
"Sudoku" cclib is what you need for musig

[23-Feb-19 01:40 PM] TonyL#3577
Just ensure that you have musig calls in cclibinfo

[23-Feb-19 01:40 PM] siu - Chainmakers#3920
```   {
      "evalcode": 18,
      "funcid": "C",
      "name": "musig",
      "method": "calcmsg",
      "help": "sendtxid scriptPubKey",
      "params_required": 2,
      "params_max": 2
    },
    {
      "evalcode": 18,
      "funcid": "P",
      "name": "musig",
      "method": "combine",
      "help": "pubkeys ...",
      "params_required": 2,
      "params_max": 999999999
    },
    {
      "evalcode": 18,
      "funcid": "R",
      "name": "musig",
      "method": "session",
      "help": "myindex,numsigners,combined_pk,pkhash,msg32",
      "params_required": 5,
      "params_max": 5
    },
    {
      "evalcode": 18,
      "funcid": "H",
      "name": "musig",
      "method": "commit",
      "help": "pkhash,ind,commitment",
      "params_required": 3,
      "params_max": 3
    },
    {
      "evalcode": 18,
      "funcid": "N",
      "name": "musig",
      "method": "nonce",
      "help": "pkhash,ind,nonce",
      "params_required": 3,
      "params_max": 3
    },
    {
      "evalcode": 18,
      "funcid": "S",
      "name": "musig",
      "method": "partialsig",
      "help": "pkhash,ind,partialsig",
      "params_required": 3,
      "params_max": 3
    },
    {
      "evalcode": 18,
      "funcid": "V",
      "name": "musig",
      "method": "verify",
      "help": "msg sig pubkey",
      "params_required": 3,
      "params_max": 3
    },
    {
      "evalcode": 18,
      "funcid": "x",
      "name": "musig",
      "method": "send",
      "help": "combined_pk amount",
      "params_required": 2,
      "params_max": 2
    },```

[23-Feb-19 01:40 PM] siu - Chainmakers#3920
all there

[23-Feb-19 01:41 PM] siu - Chainmakers#3920
i did notice format chainged in the guide

[23-Feb-19 01:41 PM] siu - Chainmakers#3920
now there is no %22

[23-Feb-19 01:44 PM] grewalsatinder#9653
>What are: PubkeyCCaddress(CClib), CClibCCTokensAddress

Not sure of this question.

>What is the difference between myCCAddress(CClib) and myCCAddress

CCAddress is the address calculated from the EVAL code from the specific CC

[23-Feb-19 01:45 PM] grewalsatinder#9653
CC address of yours would be different to normal KMD/Assetchain Address, but it'd be specific to your own `pubkey`'s

[23-Feb-19 01:45 PM] grewalsatinder#9653
You need to start your CC enabled chain with a `pubkey` on daemon start.

[23-Feb-19 01:45 PM] grewalsatinder#9653
Or at least setpubkey for that CC chain if it's already started

[23-Feb-19 01:46 PM] grewalsatinder#9653
So, you get the CCAddress for that same pubkey,

[23-Feb-19 01:46 PM] grewalsatinder#9653
I guess that's the description, unless it needs correction.

[23-Feb-19 01:47 PM] jl777c#5810
CCaddress calls are always the same as all the other CC

[23-Feb-19 01:50 PM] blackjok3r#3181
Very close to unlimited signers working here. 😄 taken a while longer than I thaught it would.

[23-Feb-19 01:51 PM] blackjok3r#3181
multi sig signing, but with almsot unlimited signers. Very cool .... but very difficult to use

[23-Feb-19 01:51 PM] blackjok3r#3181
at least right now

[23-Feb-19 01:51 PM] jl777c#5810
https://cointelegraph.com/news/blockstream-publishes-schnorr-based-test-code-for-bitcoin-blockchain-upgrade

{Embed}
https://cointelegraph.com/news/blockstream-publishes-schnorr-based-test-code-for-bitcoin-blockchain-upgrade
Blockstream Publishes Schnorr-Based Test Code for Bitcoin Blockcha...
Tech firm Blockstream has released the Schnorr-based multi-signature scheme MuSig designed to address Bitcoin blockchain privacy.
https://images.cointelegraph.com/images/740_aHR0cHM6Ly9zMy5jb2ludGVsZWdyYXBoLmNvbS9zdG9yYWdlL3VwbG9hZHMvdmlldy84YmIxYTg3MGMxYmFjMTA5YzMyMWI5YWMwMDJhOTYyMi5qcGc=.jpg

[23-Feb-19 01:52 PM] jl777c#5810
right now it does NofN multisig, as long as N is less than 4 billion

[23-Feb-19 01:53 PM] siu - Chainmakers#3920
one of my nodes was able to do combine, the other could not 🤦

[23-Feb-19 01:54 PM] siu - Chainmakers#3920
4billion signers??? 😮

[23-Feb-19 01:56 PM] blackjok3r#3181
I cant see that being realyl possible to do... unless im not doing this properly...

[23-Feb-19 01:56 PM] jl777c#5810
would need a lot of RAM and a lot of time

[23-Feb-19 01:57 PM] blackjok3r#3181
yes lol... Question, what I am doing here is using 4 keys, each uses its own MUSIG struct, each of the steps commit, nonce, partialsig, I am sending the return from each struct to all the otehr structs. I assume this is what its supposed to do, so that all structs are filled of the same data?

[23-Feb-19 01:58 PM] jl777c#5810
yes

[23-Feb-19 01:58 PM] jl777c#5810
for all but the combine sig step, all nodes need to get all data

[23-Feb-19 01:58 PM] blackjok3r#3181
good its crashing on combined sig step. retrying with gdb

[23-Feb-19 03:07 PM] blackjok3r#3181
Having a lot of trouble getting past the combining of nonce's

[23-Feb-19 03:13 PM] jl777c#5810
you made the combined pubkey?

[23-Feb-19 03:13 PM] jl777c#5810
the session is the tricky one. maybe the idea of spawning a bunch of nodes is the way to go?

[23-Feb-19 03:15 PM] blackjok3r#3181
Im not sure its the way I am doing it that is the problem

[23-Feb-19 03:15 PM] blackjok3r#3181
It seems to work just fine

[23-Feb-19 03:16 PM] blackjok3r#3181
Its crashing when tryiing to combine nonce here:
`if ( secp256k1_musig_set_nonce(ctx,&MUSIG[myind]->signer_data[i],&MUSIG[myind]->nonces[i]) == 0 )`

[23-Feb-19 03:17 PM] blackjok3r#3181
Seems to be that it doesnt have all of them, so I made it only proceed to this step on the last index, but that causes this to happen:
`error combining nonces`

[23-Feb-19 03:18 PM] jl777c#5810
MUSIG[] is an array of pointers? all allocated?

[23-Feb-19 03:18 PM] jl777c#5810
and all filled out with session

[23-Feb-19 03:19 PM] blackjok3r#3181
yes. It creates the commitments, and the nonce fine... Once thing I did find a bit strange on the nonce creation that the first call is the only return of nonce.

[23-Feb-19 03:19 PM] blackjok3r#3181
I used a vectror of pointers, and just push_back them in order...

[23-Feb-19 03:20 PM] blackjok3r#3181
then restart daemon to try again

[23-Feb-19 03:20 PM] blackjok3r#3181
Its rotating through the structs fine...

[23-Feb-19 03:20 PM] blackjok3r#3181
```COMMIT: number of MUSIG structs.4 using struct.0 addedindex.1
COMMIT: number of MUSIG structs.4 using struct.0 addedindex.2
COMMIT: number of MUSIG structs.4 using struct.0 addedindex.3
COMMIT: number of MUSIG structs.4 using struct.1 addedindex.0
COMMIT: number of MUSIG structs.4 using struct.1 addedindex.2
COMMIT: number of MUSIG structs.4 using struct.1 addedindex.3
COMMIT: number of MUSIG structs.4 using struct.2 addedindex.0
COMMIT: number of MUSIG structs.4 using struct.2 addedindex.1
COMMIT: number of MUSIG structs.4 using struct.2 addedindex.3
COMMIT: number of MUSIG structs.4 using struct.3 addedindex.0
COMMIT: number of MUSIG structs.4 using struct.3 addedindex.1
COMMIT: number of MUSIG structs.4 using struct.3 addedindex.2
```

[23-Feb-19 03:21 PM] jl777c#5810
if all the commitments are made, then a node will be able to reveal the nonce

[23-Feb-19 03:22 PM] blackjok3r#3181
nonce is revealed once so I saved those in the python script

[23-Feb-19 03:22 PM] blackjok3r#3181
its breaking when I try to use the nonces

[23-Feb-19 03:22 PM] jl777c#5810
you cant start a new session once you start the process

[23-Feb-19 03:22 PM] blackjok3r#3181
Im not

[23-Feb-19 03:23 PM] blackjok3r#3181
it starts a session.. I think... I assume the session is confined to the musig_struct

[23-Feb-19 03:23 PM] jl777c#5810
the way I had it there was only one MUSIG dataset, you need to make it allow multiple

[23-Feb-19 03:24 PM] blackjok3r#3181
https://github.com/blackjok3rtt/komodo/commit/1b5d9b5032f41422113868eca35d182c07529f7e

{Embed}
https://github.com/blackjok3rtt/komodo/commit/1b5d9b5032f41422113868eca35d182c07529f7e
show · blackjok3rtt/komodo@1b5d9b5
https://avatars1.githubusercontent.com/u/30971146?s=200&v=4

[23-Feb-19 03:26 PM] blackjok3r#3181
What happens is the nonce is returned on the first commitment... so like 
the first node MUSIG[0] you add the commitment from MUSIG[1] adn the nonce is returned immediatly

[23-Feb-19 03:26 PM] blackjok3r#3181
then when adding MUSIG[2] and MUSIG[3] it does not return a nonce.

[23-Feb-19 03:26 PM] blackjok3r#3181
then when I try top use that nonce its fails

[23-Feb-19 03:27 PM] jl777c#5810
sprintf(&str[i<<1],"%02x",MUSIG[myind]->nonce_commitments[MUSIG[myind]->myind*32 + i]);
there is no need to do MUSIG[myind]->myind to get myind

[23-Feb-19 03:28 PM] jl777c#5810
it seems you are not setting the nonces for most of the MUSIG ptrs

[23-Feb-19 03:28 PM] jl777c#5810
each MUSIG ptr needs to get all the other nonces

[23-Feb-19 03:28 PM] jl777c#5810
for (i=0; i<MUSIG->num; i++)
->         if ( ind != MUSIG[myind]->num-1 )
?

[23-Feb-19 03:29 PM] blackjok3r#3181
stopped it crashing, but didnt work

[23-Feb-19 03:29 PM] blackjok3r#3181
idea was to only combine once they were all there

[23-Feb-19 03:29 PM] blackjok3r#3181
but that doesnt work. I think the problem is the step before

[23-Feb-19 03:29 PM] blackjok3r#3181
because it return nonce as soon as it has just a single commitment

[23-Feb-19 03:30 PM] blackjok3r#3181
I thaught it needed all of them?

[23-Feb-19 03:30 PM] jl777c#5810
yes

