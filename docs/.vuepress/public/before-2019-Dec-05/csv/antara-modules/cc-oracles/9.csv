AuthorID;Author;Date;Content;Attachments;Reactions;
"424224648889106444";"Mihailo#5902";"24-May-19 12:00 PM";"Try now 😉";"";"";
"405011811511828481";"Alright#0419";"24-May-19 12:00 PM";"you just change it?";"";"";
"405011811511828481";"Alright#0419";"24-May-19 12:00 PM";"Oh oh";"";"";
"424224648889106444";"Mihailo#5902";"24-May-19 12:00 PM";"No, but I changed something else that could affect it!";"";"";
"405011811511828481";"Alright#0419";"24-May-19 12:01 PM";"I need to try it again, I was really just testing that it worked as expected with no HAX";"";"";
"405011811511828481";"Alright#0419";"24-May-19 12:01 PM";"need to try HAX again and take proper notes";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"24-May-19 02:25 PM";"I keep getting this error running test on oracle RPCs
```CC Eval EVAL_ORACLES Invalid: vin.3 is CC for oraclesregister or pubkey not same as vin pubkey, register must be done from owner of pubkey that registers to oracle!! spending tx e0915b54b98a1a0d8386ea1df90cc36cae14ae20c73332f960724964f415d563
DEBUG:BitcoinRPC:<-- {""result"":null,""error"":{""code"":-26,""message"":""16: mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)""},""id"":196}
```
its in a loop for each format string 
`valid_formats = [""s"", ""S"", ""d"", ""D"", ""c"", ""C"", ""t"", ""T"", ""i"", ""I"", ""l"", ""L"", ""h"", ""Ihh""]`
normally gets about halfway through, so pubkey is correct. Doesnt crash consistently on any specific format, but tends to get to at least ""i""";"";"";
"272003866906722306";"TonyL#3577";"24-May-19 04:49 PM";"Can you try to do the same manually?  There was strange behaviour of tests on channelsCC (you can find in #cc-channels) not reproducable on usual chain, so I'm started to sync there is some regtest specifics.";"";"👍 (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 02:08 AM";"I""m assuming it's trying to spend a utxo that was already used for an earlier tx. will try adding some sleeps or reflowing the loops";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 05:59 AM";"loop reflow seems to have resolved the issue";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 06:01 AM";"anyone able to offer a short desciption of these items and their purpose from `oraclesaddress`?
`| OraclesNormalAddress |`
`| OraclesNormalBalance | `
`| OraclesCCTokensAddress |`";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:31 AM";"got tests completing, but `Ihh` output isnt what I'd expect. 
```
        # Ihh type
        result = rpc.oraclesdata(globals()[""oracle_{}"".format(""Ihh"")], ""ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff"")
        assert_success(result)
        # baton
        oraclesdata_Ihh = self.send_and_mine(result[""hex""], rpc)
        info = rpc.oraclesinfo(globals()[""oracle_{}"".format(""Ihh"")])
        batonaddr = info['registered'][0]['baton']
        result = rpc.oraclessamples(globals()[""oracle_{}"".format(""Ihh"")], batonaddr, ""1"")
        #assert_equal(""['4294967295', 'ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000', 'ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000']"", str(result[""samples""][0]['data']), ""Data match"")
        assert_equal(""ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000"", str(result[""samples""][0]['data']), ""Data match"")
```";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:32 AM";"original `assert_equal` has 3 items, output only gves the second one";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:33 AM";"which is not same as the `oraclesdata` input (though that is assumed expected)";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:39 AM";"https://pastebin.com/tfNWuj20 <--- console readout of input/output for `Ihh` test";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:40 AM";"please don't change expected results in tests";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:40 AM";"if output not match expected result it means that error is somewhere";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:40 AM";"kept the old one commented out, just to see if it's work without the other bits";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:41 AM";"also has to remove the `u` before output, but was gonna work towards letting it back in";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:41 AM";"If tests will do only what program say there is no any reasons in tests at all";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:42 AM";"Moreover Mihailo reported about similar issue with Ihh type above, maybe there is a problem with types combining";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:44 AM";"cool. Does the `u` matter for `assert_equal`?
Had to change oraclessamples code, because didnt like using batontxis, looks like it wants baton address now.";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:44 AM";"oraclessamples output changed so maybe it return not unicode now";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:45 AM";"cool, wont work on retoring the `u` then";"";"👍 (1)";
"272003866906722306";"TonyL#3577";"25-May-19 07:45 AM";"before there was `u` because it returned unicode";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:45 AM";"Please keep in mind that end goal is not to make tests pass but to use tests to find problems in software";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:46 AM";"So if program output not matches expected logical output - maybe problem is not in test condition but in program";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:46 AM";"lol, yeah.";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:46 AM";"I'll report what goes wrong";"";"🙌 (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:48 AM";"I changed loop to get past the `bad pubkey` error. Suspect issue is allocated utxo spent before loop got to it - so error message assumed misleading, because pubkey is correct.";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:49 AM";"So if Ihh returning now except of this:
```#assert_equal(""['4294967295', 'ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000', 'ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000']""``` 
this ```assert_equal(""ffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000"", str(result[""samples""][0]['data']), ""Data match"")```";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:49 AM";"Changed `oraclessamples` params to match what it wants now";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:49 AM";"It's definetly a bug";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:49 AM";"Ihh should return I, h and h";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:49 AM";"looks like only returning `h` 🤷";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:52 AM";"the `bad pubkey` error was not always happening, and not on same format every time, so I think that is not bug in CC, just because of test script doing too much too quickly and trying to spend allocated utxos which already spent in earlier format loop.";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"25-May-19 07:52 AM";"bug in error message being strange, but not in how CC works";"";"";
"272003866906722306";"TonyL#3577";"25-May-19 07:54 AM";"Yep, I think same problem was with channels - tests executed calls too fast";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"26-May-19 06:57 AM";"Curious about the `oraclesfund` RPC. Not yet in docs. 
Takes oracleTXID as single parameter. No ""funds""?
Cant register until ""funded"". Value is not specified, but I did notice:
On oraclescreate, `OraclesNormalBalance` gains 0.001
On oraclesfund, `myCCbalance(Oracles)` gains 0.001 (repeatable)
I assume this is automatic and the value is static. Please confirm?";"";"";
"405011811511828481";"Alright#0419";"26-May-19 08:57 AM";"oraclesfund sends a static amount to your CC address";"";"";
"405011811511828481";"Alright#0419";"26-May-19 08:57 AM";"which oraclesregister will then spend";"";"";
"405011811511828481";"Alright#0419";"26-May-19 08:58 AM";"purpose of doing that is to trigger CC validation on oraclesregister inputs from what I understand";"";"";
"405011811511828481";"Alright#0419";"26-May-19 08:59 AM";"really don't think you should use regtest for unit tests btw";"";"";
"405011811511828481";"Alright#0419";"26-May-19 08:59 AM";"I *really* don't trust that regtest has the same exact behavior as a real chain";"";"";
"405011811511828481";"Alright#0419";"26-May-19 09:00 AM";"`-testnode=1` with a quick block time would be more suitable imo";"";"";
"423176312354635779";"gcharang#6833";"26-May-19 09:21 AM";"and if you need two seperate wallets for testing,
you can use: https://github.com/gcharang/create-assetchain
for starting  a chain with two daemons on the same node";"";"🍻 (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"26-May-19 01:08 PM";"I'm also manually testing on a custom chain, same params as CFEKORKL across two nodes using oraclefix branch of mixa84 repo";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"26-May-19 01:19 PM";"fwiw, added message to hex converter at http://oracle.earth/oracles_data/
to make manual testing a bit easier
rest of site is down for updates tho";"";"";
"272003866906722306";"TonyL#3577";"26-May-19 04:18 PM";"So, is there issue with combined datatypes? @smk762 -  dracocanis ominator";"";"";
"272003866906722306";"TonyL#3577";"26-May-19 10:58 PM";"`you can use: https://github.com/gcharang/create-assetchain
for starting  a chain with two daemons on the same node`

Regtest framework doing quite same thing btw:
https://github.com/tonymorony/komodo/blob/FSM/qa/rpc-tests/test_framework/test_framework.py#L202

It should be not very hard to switch to non-regtest chain, but tests will take much more time and will much harder to tests new tests  😃";"";"";
"371114647052615681";"Mylo#8306";"27-May-19 03:00 AM";"https://vimeo.com/332420851";"";"";
"371114647052615681";"Mylo#8306";"27-May-19 03:00 AM";"text based menu control of blockchain creation like @gcharang all-in-one";"";"";
"371114647052615681";"Mylo#8306";"27-May-19 03:03 AM";"it does tokens, rewards and when oracles is tested oracles.  full dev tool 😃";"";"💪 (3)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 03:31 AM";"@TonyL still working on manual confirmation, but I believe so. Keep getting `
{
  ""result"": ""error"",
  ""error"": ""data does not match length or content format specification""
}` but I think thats my fault, not bug.";"";"";
"423176312354635779";"gcharang#6833";"27-May-19 06:04 AM";"thats great mylo";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 08:10 AM";"k, confirmed my fault on the above - bad hex.";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 08:15 AM";"found a misleading error message:
when attempting to `oraclesdata` with nonregistered pubkey:
```{
  ""result"": ""error"",
  ""error"": ""datafee 0.00000000 is illegal""
}
```";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 09:57 AM";"@TonyL @Alright @smk762 -  dracocanis ominator As I mentioned before, I noticed something is wrong with oraclessamples as the data for Ihh was too short, and seems it is just returning single hash";"";"";
"272003866906722306";"TonyL#3577";"27-May-19 09:58 AM";"Yes, I think combined types data displaying is broken";"";"";
"455741312273219595";"jl777c#5810";"27-May-19 09:58 AM";"we need to find and fix all these ""little"" issues for the hardupdate";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 09:59 AM";"I'm on it now";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 09:59 AM";"```smk762@cctest163:~/mixa84/komodo/src$ ./komodo-cli -ac_name=TESTORCL oraclessamples 1f23c40cd5290a8a34425336b22ec84b05e6304a9315fdb3ec76df260a348fc3 RVerJvoYsXp3avQ3xxe54EhajZgn5xidKB 1
{
  ""result"": ""success"",
  ""samples"": [
    {
      ""data"": ""This is the third bit"",
      ""txid"": ""71d65c21f49f57ec44712f9a59c2a5dab31172267ba514510c97390e08eed366""
    }
  ]
}
```";"";"👍 (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:00 AM";"from `sss` oracle";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:00 AM";"so last `s` value returned";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:01 AM";"anything else needed to test, or wait for next commit?";"";"";
"272003866906722306";"TonyL#3577";"27-May-19 10:03 AM";"are all other tests except of `Ihh` data type passing?";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:04 AM";"yep, in the autotest. didnt do all manually tho";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:07 AM";"will do a few manually now, to get right length prefixes for hex conversion page";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:07 AM";"dont anticipate any problems tho";"";"";
"272003866906722306";"TonyL#3577";"27-May-19 10:08 AM";"great, please adjust dev docs for latest oracles update when you'll have time";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:10 AM";"already made some changes, but have a few extra blanks to fill in";"";"🔥 (1)";
"371114647052615681";"Mylo#8306";"27-May-19 10:10 AM";"yes, we'll need to update the dev docs as well.";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:10 AM";"thats what I'm working on 😃";"";"";
"371114647052615681";"Mylo#8306";"27-May-19 10:11 AM";"excellent.";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:21 AM";"@Alright I found your changes made to print only the last one, commits e5907e31a6c0ceb8368e8af260c6ae903207100b and 5c77b99a66dc1305adcc9c02bb335695c21f457f, I fixed it and now it shows it like this:
```{
  ""result"": ""success"",
  ""samples"": [
    {
      ""data"": [
        ""1366855"",
        ""00000000fa140feac8804ec316f8c1f8e8102845d9f882f11f1ff9283bfb4fed"",
        ""1e706fbd32a4587b6ae0b983d6d078b90011552481b64275484f2fc76fdc5b7d""
      ],
      ""txid"": ""f9765c07c20568cb3472056163226006dec2e393579a77dc99b90ccb1d5a4eae""
    }
  ]
}
```";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:22 AM";"@TonyL Is this display format ok or should I adapt it to something else (maybe because of tests or ...)";"";"";
"272003866906722306";"TonyL#3577";"27-May-19 10:24 AM";"I think it's good, sure. Actually data was list like this before 😃";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:24 AM";"Yes!";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:24 AM";"Just checking if it is ok 😉";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:25 AM";"I also put txid first and then data...";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 10:34 AM";"Fix pushed to https://github.com/Mixa84/komodo/tree/oraclesfix";"";"treasure (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 10:53 AM";"```smk762@cctest163:~/mixa84/komodo/src$ ./komodo-cli -ac_name=TESTORCL oraclessamples 1f23c40cd5290a8a34425336b22ec84b05e6304a9315fdb3ec76df260a348fc3 RVerJvoYsXp3avQ3xxe54EhajZgn5xidKB 6
{
  ""result"": ""success"",
  ""samples"": [
    {
      ""txid"": ""71d65c21f49f57ec44712f9a59c2a5dab31172267ba514510c97390e08eed366"",
      ""data"": [
        ""This is the first bit"",
        ""This is the second bit"",
        ""This is the third bit""
      ]
    }
  ]
}
```
🎯";"";"👌 (1),🔥 (1)";
"405011811511828481";"Alright#0419";"27-May-19 12:52 PM";"@Mihailo wasn't aware combined data types worked like that 🤔";"";"";
"405011811511828481";"Alright#0419";"27-May-19 12:52 PM";"sorry if I broke it 😅";"";"👍 (1)";
"405011811511828481";"Alright#0419";"27-May-19 12:53 PM";"@smk762 -  dracocanis ominator 
```
    {
      ""txid"": ""71d65c21f49f57ec44712f9a59c2a5dab31172267ba514510c97390e08eed366"",
      ""data"": [
        ""This is the first bit"",
        ""This is the second bit"",
        ""This is the third bit""
      ]
    }
```
how do you create a sample like this?";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 12:54 PM";"data format `sss`";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 12:55 PM";"when adding hex, concatenate the individual hex like `hexlenDATAhexlenDATAhexlenDATA`";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 02:52 PM";"only thing I dont have a definition for in docs now is `OraclesCCTokensAddress`";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"27-May-19 02:52 PM";"draft here -https://github.com/smk762/developer-docs/blob/master/docs/basic-docs/cryptoconditions/cc-oracles.md";"";"";
"424224648889106444";"Mihailo#5902";"27-May-19 02:54 PM";"name_of_ccCCTokensAddress for every CC is the global CC address where tokens are stored. Not every CC use tokens so for some this is irrelevant....";"";"👍 (1)";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"28-May-19 12:33 PM";"for the little endian number formats, is it integer only?";"";"";
"424224648889106444";"Mihailo#5902";"28-May-19 12:34 PM";"How do you mean?";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"28-May-19 12:40 PM";"like type 't', I understand the range limit, just wondering if a float can be converted and stored also";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"28-May-19 12:40 PM";"autotests are all integer";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"28-May-19 12:41 PM";"sorry if stupid question 😄";"";"";
"424224648889106444";"Mihailo#5902";"28-May-19 12:42 PM";"You can store whatever you like in that x bytes but it will be returned as integer 😉";"";"";
"424224648889106444";"Mihailo#5902";"28-May-19 12:43 PM";"So if you want, you can process it later from integer to whatever you like.";"";"";
"448777271701143562";"smk762 -  dracocanis ominator#7640";"28-May-19 12:43 PM";"cool, so float better stored as 's/S'";"";"";
"424224648889106444";"Mihailo#5902";"28-May-19 12:44 PM";"BTW, now looking at oraclesamples and I'm not sure it will work with number formats...";"";"";
"424224648889106444";"Mihailo#5902";"28-May-19 12:45 PM";"Never mind, it works...";"";"";
