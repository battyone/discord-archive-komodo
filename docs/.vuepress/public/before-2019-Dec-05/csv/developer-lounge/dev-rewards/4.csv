AuthorID;Author;Date;Content;Attachments;Reactions;
"360402743543988225";"lukechilds#2707";"02-Nov-18 12:16 PM";"appreciate it 👍";"";"";
"497498788731158529";"plazma#1625";"04-Nov-18 09:01 AM";"Wow info info cool....so munch info😮 😮 😮 😮";"";"";
"459065480511225878";"ryman112#0068";"22-Nov-18 01:36 AM";"Looking for a link on instructions to claim rewards to explain to friends.  Please and thank you";"";"";
"414128958326571008";"Hermes#6934";"22-Nov-18 01:54 AM";"@ryman112  Here is a guide that can help with this https://support.komodoplatform.com/solution/articles/29000025215-how-to-claim-the-kmd-active-user-reward-in-agama/en";"";"";
"414128958326571008";"Hermes#6934";"22-Nov-18 01:54 AM";"if you need more help come to #support";"";"";
"459065480511225878";"ryman112#0068";"22-Nov-18 01:56 AM";"Thanks";"";"";
"360402743543988225";"lukechilds#2707";"22-Nov-18 11:46 AM";"Submitted KMD Reward PR to Ledger";"";"";
"360402743543988225";"lukechilds#2707";"22-Nov-18 11:46 AM";"https://github.com/LedgerHQ/ledger-app-btc/pull/84";"";"";
"360402743543988225";"lukechilds#2707";"22-Nov-18 11:47 AM";"not heard anything from them for a few days";"";"";
"360402743543988225";"lukechilds#2707";"22-Nov-18 11:47 AM";"will ping them in the Ledger Slack on Monday if they still haven't given any feedback";"";"👍 (11),❤ (4),🎉 (2),👏🏽 (2),👌🏽 (2),shexy (2)";
"360402743543988225";"lukechilds#2707";"27-Nov-18 07:04 AM";"I messaged them in the Slack and still not heard anthing back";"";"";
"360402743543988225";"lukechilds#2707";"27-Nov-18 07:04 AM";"been over a week since the PR was submitted";"";"";
"360402743543988225";"lukechilds#2707";"27-Nov-18 07:04 AM";"for any users with GH accoutns that want to see thisimplemeted, it would be great if you could show your support by thumbs upping the PR";"";"";
"360402743543988225";"lukechilds#2707";"27-Nov-18 07:04 AM";"https://twitter.com/lukechilds/status/1067312635173957632";"";"👍 (2)";
"360402743543988225";"lukechilds#2707";"28-Nov-18 05:57 AM";"Hey @jl777c, I’ve implemented the interest calculations in JavaScript.

I used the komodod C implementation for reference, however it seems like there’s a lot of stuff going on in there and I found it a little hard to follow. Also looks like theres some consensus enforcing logic that’s important to be enforced in Komodo but really not strictly necessary to be enforced in a client library just used for calculating the values.   I also used the Agama JavaScript and dexstats.info PHP implementations as secondary reference, however I’ve found quite a few contradictions between their implementations and the Komodo implementation so I think there are some bugs in both of those. I’ve followed the C implementation much more closely than the others (I think).

If you don’t mind taking a look at my code and letting me know If I’ve correctly interpreted your code I can help fix the Agama and dexstats.info implementation.

I’m not sure how familiar you are with JavaScript but I’ve tried to write the code as clear and readable as possible with comments so hopefully it should be pretty straight forward for you to understand and soo if anything is missing.";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 05:57 AM";"To talk you through what I’m doing in plain English:

Function accepts locktime, height and satoshis of a UTXO and returns the accrued interest.

- First we need to calculate the coinage.
- - Subtract the locktime from the unixtime to get the coinage.
- - Divide this value by 60 to give the coinage in minutes.
- - Round the coinage down to ensure we have a whole number of minutes.
- Now some checks to see if the UTXO is eligible for interest
- - Return 0 if height >= KOMODO_ENDOFERA
- - Return 0 if locktime < LOCKTIME_THRESHOLD
- - Return 0 if satoshis < 10 KMD
- - Return 0 if coinage < ONE_HOUR
- Now we need to cap the reward period if the coinage is over a certain amount
- - If tx height is < 1000000 cap reward period at one year
- - If tx height is >= 1000000 cap reward period at one month
- Subtract 59 minutes from reward period
- Calculate the final reward amount by:
- - satoshis / 10512000
- - Round the result down to ensure we have an integer
- - multiply this integer by the reward period
-  As a final sanity check, this should never happen, but if the reward amount is a negative number, just return 0.
- Return the reward amount.

Btw, what is this 10512000 value? Some kind of interest multiplier? How would you describe this number? Need a clear variable name for it haha.";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 05:58 AM";"You can view my JavaScript implementation here:

https://github.com/lukechilds/komodo-ledger-reward-claim/blob/f7ebfe9fbb84df893a3d2cbd9f626ade0a4c507c/src/lib/get-komodo-rewards.js";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 05:58 AM";"I also have a number of questions based on the C code, regarding things that I’m not quite sure what they’re doing and whether I should be including them in my calculations or if they’re not relevant to this use case. But I’ll let you get back to me on what you think of this before I spam you with a load of questions about that.";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 05:58 AM";"Thanks!";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:07 AM";"above sounds correct. of course there is no need to check about height 1 million or not as we are well past it, just cap to a month I think I used 31 days";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:08 AM";"the 10512000 I call divisor. it is just what the math works out when you do 5% based on minutes";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:08 AM";"pbca26 has the same logic in javascript for agama over SPV";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:08 AM";"@pbca26";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:15 AM";"I still need to check the height for old UTXOs though right";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:15 AM";"if a UTXO was created before block 1 million then it can accrue interest for a year cant it?";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:16 AM";"I'm pretty sure that's how the source code in Komodo handles it";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:16 AM";"oh, that is true! sorry, need more coffee";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:16 AM";"haha";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:18 AM";"devisor makes makes sense";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:19 AM";"Yeah, I ised the Agama logic as reference too";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:19 AM";"https://github.com/pbca26/agama-wallet-lib/blob/74390cbe2fe88e1f075f83b2b25d063ddc83208a/src/komodo-interest.js";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:19 AM";"There are a few errors in it";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:20 AM";"but only minor ones";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:20 AM";"should likely not cause it to fail, just will result in less interest being claimed than is available";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:21 AM";"and in some cases might result in weird output but I that would only normally occur if people were feeding in dodgy input, not with legitimate transactions";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:22 AM";"@jl777c I'm also a little confused about when I should and shouldn't be rounding down";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:22 AM";"I think I got it right";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:26 AM";"For example I do `coinage = Math.floor((unixtime - locktime) / ONE_HOUR)` so coinage is always an integer. However in Agama it does `timestampDiffMinutes = timestampDiff / 60`. Notice this isn't rounded, so the minutes can be a floating value. All calcualtions are done based on this floating value and then the final value is rounded down.

I think my version is correct in that all calculations should be done with integers with no need to round the final result.
As opposed to Agama where calculations are done to floatin point precision and the rounded down at the end";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:26 AM";"Am I correct?";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:26 AM";"or should I implement it like it is in the Agama implementation";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:27 AM";"komodod doesnt use floating point";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:27 AM";"so all calcs are rounded, even the intermediate";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:27 AM";"i have zero idea how javascript does its expression handling";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:27 AM";"the problem with agama was it was using floating point and multiplying a fraction that wasnt there in the integer calcs";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:28 AM";"right, but the results I get from my function and the Agama function are different";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:28 AM";"only slightly";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:28 AM";"and both are accepted by the network";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:28 AM";"but I'm only testing with small values";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:28 AM";"I think with larger values, the Agama implementation would drift further away, maybe even to the point that it becomes invalid";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:30 AM";"I also have a few questions from your source";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:31 AM";"just to see if I need to implement any of these missing bits in my implementation";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:31 AM";"2 secs, will find my lsit";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:40 AM";"@jl777c I’ve numbered the questions, would be great if you could reply with the numbers so I can easily work out which bits you’re replying to.

1)
What is the `(minutes= (tiptime - nLockTime) / 60) >= (KOMODO_MAXMEMPOOLTIME/60)` check for? Do I need to implement this.

2)
There a re a few checks for `tiptime != 0`. What are these for? Do I ned to implement them?

3)
what is `nValue > 25000LL*COIN` for? Checking max supply? Do I need to implement it?

4)
What is this block of code for? Looks like it’s maybe blacklisting previous supply inflation attacks or something?

```
if ( (txheight == 116607 && nValue == 2502721100000LL) ||
    (txheight == 126891 && nValue == 2879650000000LL) ||
    (txheight == 129510 && nValue == 3000000000000LL) ||
    (txheight == 141549 && nValue == 3500000000000LL) ||
    (txheight == 154473 && nValue == 3983399350000LL) ||
    (txheight == 154736 && nValue == 3983406748175LL) ||
    (txheight == 155013 && nValue == 3983414006565LL) ||
    (txheight == 155492 && nValue == 3983427592291LL) ||
    (txheight == 155613 && nValue == 9997409999999797LL) ||
    (txheight == 157927 && nValue == 9997410667451072LL) ||
    (txheight == 155613 && nValue == 2590000000000LL) ||
    (txheight == 155949 && nValue == 4000000000000LL) )
    exception = 1;
if ( exception == 0 || nValue == 4000000000000LL )
    printf("">>>>>>>>>>>> exception.%d txheight.%d %.8f locktime %u vs tiptime %u <<<<<<<<<\n"",exception,txheight,(double)nValue/COIN,nLockTime,tiptime);
```";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 08:40 AM";"5)
Do I need to do anything to handle pre interest activation?

There are references to less than block 250000 and `activation = 1491350400;  // 1491350400 5th April`.

Is this when interest was activated? Do I need to disable interest claims on UTXOs older than this?

Some examples of where it appears. I’m not quite sure what it’s doing but it doesn’t seem to be disabling anything.

```
numerator = (nValue / 20); // assumes 5%!
                    if ( txheight < 250000 )
                        interest = (numerator / denominator);
```

```
if ( txheight < 250000 || tiptime < activation )
                {
                    if ( txheight < 250000 || numerator * minutes < 365 * 24 * 60 )
                        interest = (numerator / denominator) / COIN;
                    else interest = ((numerator * minutes) / ((uint64_t)365 * 24 * 60)) / COIN;
                }
```";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 08:50 AM";"1 . that is the one hour check.
2. just a sanity check that there is a non-zero tiptime. a 0 tiptime would create negative duration
3. ignore
4. ignore
5. no";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:51 AM";"thanks for you answers";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:51 AM";"also, re the devisor";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:51 AM";"I'm still not quite sure what exactly this is";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:52 AM";"when you get a value and devide it by a deviser it gives you the interest per minute, right?";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:52 AM";"so you can multiply that up for the duration of minutes to find the total interest amount";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:52 AM";"how did you actually calculate the value 10512000?";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 09:53 AM";"would just like to make the meaning a bit more clear in my code so I understand it when I come back to it";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:05 AM";"it does all the multiplying and dividing needed to end up at 5% APR";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:05 AM";"i just combined numerator and denominator constants into a single one, but this way it avoids any overflow/underflow issues";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:06 AM";"in essence it is a constant. if you use half its value, then it will be 10% APR";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:06 AM";"if you use double the value 2.5% APR";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:06 AM";"it is just the constant that calculates 5% APR when used in the equation where it is";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:09 AM";"365 * 24 * 60 / 10512000 = 0.05";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:10 AM";"it is the divisor to use on the minutes in a year to get 5%";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:10 AM";"I see, thanks";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:11 AM";"and `rewardPeriod -= 59;`";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:11 AM";"that is to make sure the first hour of coinage doesn't account towards the accrued interest. Is that correct?";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:11 AM";"correct";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:12 AM";"out of interest, why is it 59 instead of 60?";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:13 AM";"to avoid divide by zero?";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:14 AM";"i guess it wouldnt have divided by zero. it was done in the midst of a week without any sleep as we were bombarded with three different attacks";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:14 AM";"so just instinct to use 59 instead of 60";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:15 AM";"ah, I see";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:15 AM";"and once it was done, it would take a hard fork to ""fix"" it";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:15 AM";"there is nothing wrong with the number 59 though, it is just as valid a number as 60. so the 59 numbers lobby fought hard to keep it there";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:16 AM";"lol";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:16 AM";"this might be a bit of a pain";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:18 AM";"but by any chance would you be able to pull out the interest calc code and give me a binary I can pass values to and get the reward output.

I would like to vigorously check my implementation is compliant with the network consensus and write a test suite to ensure it stays compliant";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:18 AM";"it would be good to publish my function as an independent module so all other software in the Komodo ecosystem can pull in this module and benefit from it";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:18 AM";"rather than having everyoen implement it themselves with their own various quirks";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:19 AM";"I'm thinking something like:

```
$ calcinterest locktime height satoshis
0.00257346
```";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:19 AM";"as a binary executed on the CLI";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:20 AM";"obvs `locktime`, `height`, and `satoshis` would be replaced with numbers";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:20 AM";"bonus points for allowing the current time to be passed in too";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:20 AM";"instead of using the system clock";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:20 AM";"gettxout has ""interest"" field";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:21 AM";"is that an RPC command?";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:21 AM";"and I pass it a TXID?";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:23 AM";"gettxout txid vout";"";"";
"455741312273219595";"jl777c#5810";"28-Nov-18 10:23 AM";"yes pass in txid and vout of a utxo";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:24 AM";"yep";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:24 AM";"got that working";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:24 AM";"only issue is it uses the system time";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:24 AM";"rather than me being able to pass a time in";"";"";
"360402743543988225";"lukechilds#2707";"28-Nov-18 10:24 AM";"so hard to validate against accurately";"";"";
