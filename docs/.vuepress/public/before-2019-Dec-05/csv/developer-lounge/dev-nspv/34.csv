AuthorID;Author;Date;Content;Attachments;Reactions;
"455741312273219595";"jl777c#5810";"28-Jul-19 08:43 PM";"all updated";"";"ðŸ‘Œ (1)";
"455741312273219595";"jl777c#5810";"28-Jul-19 08:50 PM";"@blackjok3r great PRs today!";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 08:50 PM";"np";"";"";
"349903748539351042";"allbits#5898";"28-Jul-19 08:56 PM";"So, configure worked and I was able to invoke make. But it failed

Fatal error: sodium/crypto_generichash_blake2b.h
No such file or directory";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 08:56 PM";"what OS?";"";"";
"349903748539351042";"allbits#5898";"28-Jul-19 08:57 PM";"Debian 9";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 08:57 PM";"sudo apt-get libsodium-dev";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 08:57 PM";"I think thats what it is";"";"";
"349903748539351042";"allbits#5898";"28-Jul-19 08:57 PM";"K";"";"";
"349903748539351042";"allbits#5898";"28-Jul-19 08:58 PM";"Working :)";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 09:17 PM";"nice";"";"";
"232679450301431808";"blackjok3r#3181";"28-Jul-19 09:17 PM";"its pretty sweet, but there is a LOT of work to to stil lol";"";"";
"272003866906722306";"TonyL#3577";"29-Jul-19 05:34 AM";"https://github.com/jl777/libnspv/pull/31 ðŸ˜Š";"";"";
"367065123044589581";"radix42#3743";"29-Jul-19 08:10 PM";"@jl777c just confirmed that my build of nspv on 32bit raspberry pi works!";"";"â™¥ (3),KMD (3)";
"455741312273219595";"jl777c#5810";"30-Jul-19 05:40 AM";"!! so it seems to have universal compatibility";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:08 AM";"Looks like a bug.
On latest master: commit: 3cc8d2aaa0abec7253825b50a080988b0b37c27f 

```shell
curl --data-binary '{""jsonrpc"": ""2.0"", ""id"":""curltest"", ""method"": ""hdrsproof"", ""params"": [1456592, 1456694 ] }' -H 'content-type: text/plain;' http://127.0.0.1:7771/
```
```json
{""result"":""success"",""prevht"":1456570,""nextht"":1456570,""prevtxid"":""93a1c7d75fd84366c742bfdc3ab6a8c640df5d020113b55f3288b942e045feb3"",""prevtxidht"":0,""prevtxlen"":0,""nexttxid"":""848b861cf11f30e4e62ac3567fa553ace89b1fbde7ffaefaa4f94926f3561928"",""nexttxidht"":1456584,""nexttxlen"":263774,""numhdrs"":1,""headers"":[{""height"":1456570,""blockhash"":""0055343953285e73c52d6fb5526ffb04260beac51d4b50ee6da82766f64b847d"",""hashPrevBlock"":""000000007c95cf32cd13fb4692ad6fee85027fcd12139f02ed393a9579918bdd"",""hashMerkleRoot"":""845ea63252ee2323217b44f9ff72975680abee693800665070465811102b5cba"",""nTime"":1563961526,""nBits"":486607149}],""lastpeer"":""nodeid.30""}
```

hdrsproof call always returns only one block header - one below prevheight parameter.
Response always contains prevheight == next height, ""numhdrs"":1";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:19 AM";"This is probably a cause of above:

```shell
curl --data-binary '{""jsonrpc"": ""2.0"", ""id"":""curltest"", ""method"": ""notarizations"", ""params"": [1456592] }' -H 'content-type: text/plain;' http://127.0.0.1:7771/
```
```json
{""result"":""success"",""prev"":{""notarized_height"":0,""notarized_blockhash"":""0000000000000000000000000000000000000000000000000000000000000000"",""notarization_txid"":""0000000000000000000000000000000000000000000000000000000000000000"",""notarization_txidheight"":0,""notarization_desttxid"":""0000000000000000000000000000000000000000000000000000000000000000""},""next"":{""notarized_height"":0,""notarized_blockhash"":""0000000000000000000000000000000000000000000000000000000000000000"",""notarization_txid"":""0000000000000000000000000000000000000000000000000000000000000000"",""notarization_txidheight"":0,""notarization_desttxid"":""0000000000000000000000000000000000000000000000000000000000000000""},""lastpeer"":""nodeid.32""}
```

Zero output for any height notarizations call.";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:30 AM";"Oh. Plz nevermind, had a problems with synchronization.
Daemon restart helped.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:30 AM";"Nice, it needs some more error correction/detection. For sure";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:31 AM";"Yet I'm not sure why daemon was not in sync. Hm.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:31 AM";"It seems to have undefined behaviour sometimes, I saw the same myself.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:33 AM";"What chain are you using? And also after the latest changes there may be old nodes that return bad data, unless u have your own daemon you know is on correct version?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:34 AM";"I had to edit source to make it only connect to a single node, may need a connect= option.";"";"";
"272003866906722306";"TonyL#3577";"30-Jul-19 08:36 AM";"It is KMD chain. I wonder reason is some bad peer/s and on reconnect you connected to another peer  maybe which return correct headers info @Sir Seven";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:37 AM";"Yes that will be it, we hard forked, but there is no way to detect peers are correct version yet";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:40 AM";"Was connected to nodes 29. 30, 31.
ATM: 28, 1, 11, 22, etc. None of the above.
Not sure of their IPs.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:41 AM";"Nodeid changes, and currently there is no way to detect the node version. Its something I'll add, I think as I for see many needed changes daemon side over time until we get it into a state that is useable.";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:42 AM";"If problem repeats, I'll record node ips.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:42 AM";"Getpeerinfo will tell u they nodes ips,";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:42 AM";"Yeah.";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 08:42 AM";"Just don't have old record to check previous node ips.";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:42 AM";"But really, to test properly u need to be connected to a known good peer";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:42 AM";"For now";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:46 AM";"why cant you use the version field to see if peers are using latest?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:46 AM";"i added it to getinfo response";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:46 AM";"Can do then yes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:47 AM";"also hdrsproof is really an internal function as to properly do a notarization proof you need the txid of the 2 notarizations";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:48 AM";"at the cli level it is passed a height, and it scans backwards and forwards to find notarizations, but maybe it wont be the ideal ones";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:48 AM";"and there is the case of having no next notarization, in this case the data returned is not complete, probably we should make it return all headers to the current height";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:49 AM";"so quite a few loose ends, which i hope @blackjok3r can fix";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:49 AM";"There are many, yes. I have some ideas, but I don't want to rush these things.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:50 AM";"yes, no need to rush, it works quite well as it is and we want to make each improvement solid";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:50 AM";"lets make github issues for all the things we want to enhance";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:50 AM";"Yes good idea";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:53 AM";"basically i want to handoff the libnspv to you for the continued enhancements. it seems there are a lot of cool things we can do to make it more efficient and have more functionality. i am surprised that the single threaded nature of it is not creating any significant performance issues, even with the rate limiter. if we can keep it that way, it will simplify the internal control flow and also he complexity of any new additions";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:56 AM";"I was honestly thinking of making it multi threaded, so we can submit requests on one thread and have another thread handle the incoming stuff.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:57 AM";"multicoin makes it multithreaded, but single threaded per coin";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:57 AM";"you will open up an incredibly complicated state space the moment you multithread the single coin";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:57 AM";"Yes true..";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:58 AM";"instead of being able to linearly (quickly) track down a bug, each bug could become chasing the exact timing of the different threads";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:58 AM";"keep it simple as long as you can";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:58 AM";"OK. Sounds like a good plan";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:58 AM";"i think adding more caching will solve most performance issues";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 08:58 AM";"Cache needs work yes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:59 AM";"splitting out some of the long sequences that do everything, into separate pieces that can be done independently, and then calling those pieces in a sequence";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 08:59 AM";"then that allows reusing all the smaller actions";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:00 AM";"i think once the code is such that for any specific action, there is a dedicated function to do it and a specific globals structure that has its state updated (based on whatever logic is needed), then at any point in time, you can look at the current state and make decent decisions on what to do, especially if there is a recent mempool search";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:01 AM";"i fear that if we go to multicoin and each one is multithreaded, within weeks it will become very difficult to debug anything";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:01 AM";"let the rust guys who will refactor all this (if needed) deal with such things";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:01 AM";"Yes, need to keep thing simple";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:01 AM";"with an html wallet interacting to the nspv instance for a coin, as long as most of the time things respond in a second or two, that is sufficient";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:02 AM";"please let me know before you try to do anything too ambitious. we have a stable working baseline now and it is single threaded. so adding any new feature should just be a matter of adding it and debugging it. then we get a new better working baseline";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:03 AM";"iterate this N times and soon we will struggle to find any other improvements to do";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:03 AM";"No worries";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:04 AM";"In was thinking, we should add some kind of uuid or something for a call, so its easy to tell when it arrives it is one you have been waiting for.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:04 AM";"the usecase for nspv is the individual user, not for people that want to use it to run an exchange (even though you can make a pretty lightweight CEX of komodo ecosystem coins with nspv), exchange usecase is the only one i can think of that requires multithreading on a per coin basis. but what do we think of a CEX that isnt running fullnodes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:05 AM";"@blackjok3r a uuid would allow to have a universal way for all the NSPV issuing functions to tell the response came in, as compared to the current method of checking the results structure";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:06 AM";"the advantage of being single threaded is that when the response comes in, we know what request it was for, as we only had a single request";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:06 AM";"remember, we want to scale to millions (or billions) of superlite nodes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:06 AM";"if they are spewing out tons of requests, they are not superlite anymore and we cant achieve the scale and it defeats its primary purpose";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:07 AM";"the html gui will be via static html dynamically generated inside nspv. I am working with satinder on that. no javascript and certainly no node.js";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:08 AM";"@Sir Seven please carefully read all this to understand the libnspv philosophy";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:08 AM";"we do need automated tests to make sure when we update that we didnt break anythings";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:09 AM";"my understanding is that @Sir Seven will be making those";"";"âœ… (1)";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:10 AM";"@blackjok3r since we can currently achieve the effect of uuid, we save the overhead of sending it both ways by not having it. i think for superlite that is a more important issue";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:11 AM";"OK so currently it submits a request and iterates until it has arrived, I was going to add a queue to the send requests with some uuid, so that when it arrives we know what request it was. Otherwise the single thread is always just sleeping and can't achieve much, and when it fails, then we have no way to request it again except for brute forcing more calls";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:13 AM";"but what is there to achieve?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:13 AM";"the only background task is the getinfo calls";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 09:14 AM";"We are currently on it.
Preparing basic functional tests and build test.
There will be a lot of changes with arrival of html GUI-page.";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 09:14 AM";"On our test-side at least.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:14 AM";"html page will be hard to do automated tests, but it is just static html, so i think once all the buttons work, then it should be stable";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:15 AM";"and it will just be using the same api calls";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:15 AM";"@blackjok3r what other things do you want the superlite to be doing while it is waiting for a response?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:15 AM";"Well I guess.it doesn't";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:15 AM";"So it can wait";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:16 AM";"once you make it go to a serialized request queue with uuid, when it comes back, then you need to resume what was waiting for it. so what will you use? setjump and longjump? there is only one thread per coin anyway";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:17 AM";"Its just when working on dicecc u told me the correct way to handle sleeps and waits was to make a queue and a different thread.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:17 AM";"different higher level constraints";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:17 AM";"when you are constrained to a single thread, making a queue in a different thread violates that";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:18 AM";"please believe me that things will get 10x to 100x harder to deal with the moment we abandon being single threaded";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:18 AM";"instead of amazing things getting done in days, it will slow to weeks";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:18 AM";"Yes I agree, I just taught that was the proper way to handle it, don't want to make things harder than they need to be, so single thread it is";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:19 AM";"in dice CC, we are in a multithread environment anyway";"";"";
"272003866906722306";"TonyL#3577";"30-Jul-19 09:19 AM";"`html page will be hard to do automated tests` - for wallet probably might be good to make simple E2E tests in future (click on buttons in some transactional case and get expected results yep). But wallet is under development atm @Sir Seven 
What is needed at first is RPC calls unit-tests coverage";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:19 AM";"the multithreading is ok for multicoins, one thread per coin";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:19 AM";"Yes";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:19 AM";"That is required";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:20 AM";"also the other advantage of single threaded is that it can run in firmware without a feature rich mulithreading os";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:21 AM";"for clarity there is two threads, one that does the nspv stuff and the api thread";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:22 AM";"for multicoin, we can continue to have 2 threads per coin plus a special global api thread, but at that point we do need to use mutex to serialize requests";"";"";
