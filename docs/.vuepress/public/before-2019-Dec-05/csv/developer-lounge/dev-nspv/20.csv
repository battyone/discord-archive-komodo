AuthorID;Author;Date;Content;Attachments;Reactions;
"272003866906722306";"TonyL#3577";"13-Jul-19 07:29 PM";"on NSPV it's ```""retcodes"": [
    -2004
  ]
``` have to check on ILN or KMD maybe";"";"";
"455741312273219595";"jl777c#5810";"13-Jul-19 07:30 PM";"no rush, it does for me now, so it should work much more reliably in general";"";"üöÄ (2)";
"455741312273219595";"jl777c#5810";"15-Jul-19 04:27 PM";"updated to a new nSPV hardfork and changed the seed node for KMD, now there is a mempool query function that lets you get the full mempool, check if a specific txid is in the mempool, check if a specific utxo (txid/vout) is spent in the mempool, or even if a specific address received any funds with a mempool txid";"";"";
"455741312273219595";"jl777c#5810";"15-Jul-19 04:28 PM";"still need to change all CC queries of mempool to use this function, but from what i can tell, once i do that we should have almost all CC rpc working as they should, though of course some will be quite slow";"";"";
"455741312273219595";"jl777c#5810";"17-Jul-19 12:34 PM";"latest version supports most of the mempool usage inside CC, so most CC rpc calls should work, with just a few exceptions";"";"";
"365714438864633856";"dukeleto#7326";"18-Jul-19 05:55 PM";"I have merged the latest FSM branch to Hush which includes nSPV, looking forward to playing with it on the Hush network in the future";"";"";
"455741312273219595";"jl777c#5810";"18-Jul-19 05:57 PM";"let me make sure it is the latest version, there were some recent changes, especially to support CC";"";"";
"455741312273219595";"jl777c#5810";"18-Jul-19 06:01 PM";"it wasnt";"";"";
"455741312273219595";"jl777c#5810";"18-Jul-19 06:02 PM";"just updated FSM with support for most CC via nSPV, it also adds skipcount to listunspent and listtransactions";"";"";
"365714438864633856";"dukeleto#7326";"19-Jul-19 02:28 AM";"i was having some issues syncing that merge to the network, so I will try to merge the latest stuff";"";"";
"455741312273219595";"jl777c#5810";"19-Jul-19 05:07 AM";"strange, it shouldnt change behavior of normal mode sync";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 07:33 AM";"Hey @Slyris 
Hope you doing well.
How's the progress going with nSPV implementation with breadwallet-core library? üôÇ";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:04 AM";"Hello @grewalsatinder I'm not on this part actually, i was working on the dashboard (back-end) project";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:10 AM";"As I am a beginner in the `komodo ecosystem`. I preferred to look into a more accessible project for a start. Now that I understand the ecosystem better and better I will be able to do more interesting things. I think I still do not have the knowledge for `nSPV`";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:28 AM";"@Slyris oh I guess then I tagged mistakenly you thinking you are the dev working on breadwallet-core library for nSPV üòÖ";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:29 AM";"don't remember who was that dev, and wish to get an update on it.";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:29 AM";"@jl777c";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:29 AM";"nSPV interest me a lot, I talk about being able to participate at the beginning, finally I work on something else with @ca333";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:30 AM";"hmm.... okay... so it was you?";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:30 AM";"any idea if anyone working on breadwallet-core library?";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:30 AM";"And I think it's better like that, I still do not have enough knowledge to work on features like nSPV currently.";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:30 AM";"I have no idea to be honest with you";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:30 AM";"no problem mate. thanks for quick reply üëç";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:30 AM";"Your welcome";"";"";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:30 AM";"glad you still found something else to work on here üòâ";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:31 AM";"Yeah, i will work litteraly my whole time on Komodo soon";"";"üëç (2)";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:31 AM";"very exciting!";"";"";
"206445134122844170";"Slyris#2880";"19-Jul-19 08:31 AM";"Ahah yes, let's build the future.";"";"üíØ (2),‚úÖ (2)";
"455741312273219595";"jl777c#5810";"19-Jul-19 08:41 AM";"@grewalsatinder i decided not to use breadwallet and am making libnspv";"";"";
"455741312273219595";"jl777c#5810";"19-Jul-19 08:41 AM";"based on libbtc";"";"";
"455741312273219595";"jl777c#5810";"19-Jul-19 08:43 AM";"libbtc has a headers only SPV client in it, which means it also does all the p2p messaging";"";"";
"455741312273219595";"jl777c#5810";"19-Jul-19 08:43 AM";"and that is really all that is needed to connect to the komodo_nSPV files";"";"üëç (2),üòÉ (2),üòé (2),KMD (2)";
"347922216429813760";"grewalsatinder#9653";"19-Jul-19 08:47 AM";"oh perfect! I can trust it'll be top class work since you are on to it @jl777c 
Thanks for answering üòÉ";"";"";
"365714438864633856";"dukeleto#7326";"19-Jul-19 04:38 PM";"@jl777c libnspv based on libbtc sounds lovely. Great idea. I think that will also make it easier to use on embedded devices";"";"";
"455741312273219595";"jl777c#5810";"19-Jul-19 04:43 PM";"pure C nSPV superlite";"";"üòé (1)";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:05 PM";"@TonyL  @grewalsatinder @dukeleto @Slyris   @Mihailo    i made a new nSPV client based on libbtc, i call it libnspv and my jl777 branch has all but nspv_spend working. you need to use curl to invoke it and only NSPV, KMD and BTC are supported. it should work with the existing nSPV fullnodes. for BTC it will behave as libbtc does, ie. as a headers only SPV. i guess i will add ILN next so I can verify the notarizations functions are working. Other than having to use curl vs. cli, the overall functionality should be very close (identical?) to the nSPV=1 clients, just without any CCtx ability

it is 100% in C and stripped executable size is 250kb, i think mem usage is very small. also, it should build in both osx and windows, it uses autogen.sh and ./configure

known bugs are: peers need to be in the seedlist and blockhash calc is wrong, spend is not implemented yet. single rpc call at a time, api is just to allow testing. userpass or any other measures is absent

~/libnspv/src/tools/nSPV_testvectors has a bunch of curl calls for NSPV chain. just change the port to call another chain, you can add a ""coin"" field for error checking, but basically if the nspv gets a request it will assume it is for it.";"";"shexy (2),üëç (2),üëè (2),üòé (1),KMD (1),üî• (1)";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:08 PM";"@jl777c I'm looking the code of nSPV_superlite.h right now";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:09 PM";"the files in libnspv are based on the ones in komodo repo, but i had to make changes to make it happy with pure C";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:13 PM";"https://github.com/jl777/libnspv/blob/3c016b58de87db7bd248cd52eca4e8e277d08630/src/tools/nSPV_superlite.h#L72";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:13 PM";"`==` ??";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:13 PM";"is this a mistake you want to do `=` no ?";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:14 PM";"@jl777c";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:14 PM";"yes! a bug, replicated many places. fixing";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:15 PM";"We are looking it with a friend that code in C";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:15 PM";"i will report more with him if we found";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:17 PM";"oh, to run NSPV chain, just do ./nspv";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:17 PM";"for any other coin, ./nspv COIN";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:18 PM";"im not sure but https://github.com/jl777/libnspv/blob/3c016b58de87db7bd248cd52eca4e8e277d08630/src/tools/nSPV_superlite.h#L266 you initialize a second time at 0 n no ?";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:18 PM";"@Doom Hello";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:18 PM";"Hey !";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:18 PM";"ILN supported now";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:18 PM";"Thank's for spotting the `==` @Doom";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:19 PM";"No prob @Slyris ‚ù§";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:19 PM";"thanks!";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:19 PM";"in C, it is not initialized if just declared";"";"üëç (1)";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:19 PM";"```c
int32_t i,n,flag = 0;
```";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:19 PM";"It initialize only flag here ?";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:20 PM";"https://github.com/jl777/libnspv/blob/3c016b58de87db7bd248cd52eca4e8e277d08630/src/tools/nSPV_superlite.h#L262";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:20 PM";"Yep I think so";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:20 PM";"yes, only flag is initialized. the rest are whatever values from the stack";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:20 PM";"Oh i was not aware, i was sure the 3 variable was initialized to zero in this case";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:21 PM";"But since `n` is only used inside the `if` block, maybe its declaration could be moved to that scope too";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:21 PM";"in C++ i think so";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:21 PM";"@Doom my style is to declare all locals at the top of the function. that way i can easily see the stack usage of each function";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:22 PM";"maybe it doesnt matter so much now, but i used to have to get code working with 4kb stack";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:22 PM";"cJSON is your library @jl777c  ?";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:22 PM";"dave gamble made it, but i added convenience functions to it";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:22 PM";"ok";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:24 PM";"@jl777c Makes sense for embedded systems, maybe less so if your code runs on a regular computer :p";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:25 PM";"i found that code for embedded systems runs on desktops, but not the other way around";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:25 PM";"That sure is true :p";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:25 PM";"by coding to embedded systems as much as possible, it allows maximum coverage";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:25 PM";"libnspv uses libevent and tcp/ip sockets as the only system dependencies other than a system clock";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:26 PM";"it uses no HDD";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:26 PM";"However, defining the platform you write for and taking advantage of its features is interesting too";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:26 PM";"unless using legacy BTC";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:26 PM";"Depends what your target is with this library !";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:26 PM";"i want it to run everywhere";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:27 PM";"i have a question about the usage of     `memset(spenttxidp,0,sizeof(*spenttxidp));`

Why not use bzero @jl777c  ?";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:27 PM";"Then minimizing dependencies is indeed crucial";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:27 PM";"Is this better to use memset ?";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:27 PM";"`bzero` is deprecated @Slyris";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:27 PM";"üòÆ";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:27 PM";"bzero is for strings?";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:28 PM";"memset and memcpy have worked for decades, why change?";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:28 PM";"memcmp too";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:28 PM";"Nah `bzero` works with raw data too";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:28 PM";"memcmp is great";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:28 PM";"But it's considered legacy / deprecated";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:28 PM";"The `mem*` functions are pretty good and heavily optimized, so they are cool üòÉ";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:29 PM";"okok n o problem, i'm still looking";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:32 PM";"Should we review : https://github.com/jl777/libnspv/blob/jl777/src/tools/nSPV_utils.h too @jl777c  ?";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:33 PM";"that isnt quite done yet, still need to convert all the blockchain specific functions to libbtc internals";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:34 PM";"If the memory footprint is to be considered, the `bool` type could be used sometimes";"";"";
"206445134122844170";"Slyris#2880";"20-Jul-19 02:34 PM";"https://github.com/jl777/libnspv/blob/jl777/src/tools/nSPV_utils.h#L572 still one vector here";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:34 PM";"(Might change nothing sometimes because of alignment, but it's still a good practice)";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:34 PM";"yes, but those almost always get expanded to a byte";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:35 PM";"@Slyris that is inside #ifdef later";"";"";
"206208358141657088";"Doom#9021";"20-Jul-19 02:35 PM";"(They are always expanded to a byte, but a byte is better than a double word :p)";"";"";
"455741312273219595";"jl777c#5810";"20-Jul-19 02:35 PM";"i use uint8_t for all bools";"";"";
