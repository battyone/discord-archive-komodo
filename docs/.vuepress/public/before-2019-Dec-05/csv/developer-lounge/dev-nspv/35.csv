AuthorID;Author;Date;Content;Attachments;Reactions;
"455741312273219595";"jl777c#5810";"30-Jul-19 09:23 AM";"therefore it might actually be better to have a special new dapp multinspv, that launches the various single threaded nspv and just makes api requests to each of them";"";"🔥 (1)";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:24 AM";"it will be a bit less efficient as api calls would be needed for each interaction, but i dont forsee there needing to be thousands of interactions per second";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:24 AM";"yes, this will be much simpler. making nspv handle multicoins per instance will make it have to deal with mutex issues";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:25 AM";"though the only internally generated event now is the getinfo call, so maybe it isnt so bad, but as it grows, maybe we put more in the NSPV_periodic and each additional thing that is done is potentially in a race condition with the multicoin logic";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:26 AM";"the multinspv of course should be multithreaded";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:26 AM";"but like iguana it is just talking to the existing daemons";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:26 AM";"So for more coins you want to launch a new process?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:27 AM";"why not? a 3MB footprint is no big deal";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:28 AM";"its not like it has a 3GB footprint";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:28 AM";"being so small, what makes no sense normally starts making sense";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:28 AM";"Yes doesn't seem a problem, I actually thought of that myself, just have it luanhc a new nspv instance for the coin it needs to connect to andd wait until it sends the response";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:28 AM";"you need to recalculate all the reasons for most everything";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:29 AM";"usually you dont want to spawn a new executable due to its overhead";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:29 AM";"but if the overhead is 3MB, you can spawn 100 of them, literally and be the same as a single komodod footprint";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:30 AM";"what is the name of the smallest lizard, like a microscopic one";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:30 AM";"For the multichain stuff though, if an import tx happens all nodes will need to connect to the other chain to verify the proof";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:31 AM";"We have geckos? And skinks?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:31 AM";"Skinks are tiny";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:31 AM";"In 2001, scientists discovered a tiny lizard on a tiny island off the coast of the Dominican Republic. The Jaragua lizard measures about three quarters of an inch in length, or 16 millimeters, from the tip of his snout to the base of his tail. To get a good idea of just how small this fellow is, picture a dime with the lizard curled up around its perimeter.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:31 AM";"what do you mean all nodes?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:33 AM";"Wait sorry, no the proof is part of the import and linked back to notaries. Sorry";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:34 AM";"i imagine that to do a crosschain, you need to spawn the two chains (if they are not already running)";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:34 AM";"do what you need to do on each chain to issue and validate it is all happy";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:35 AM";"then can even disconnect from the originating chain";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:35 AM";"Yes I figured it would work the same, but would not all nodes who need to verify that tx need tondo the same?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:36 AM";"all the fullnodes would be doing the validating";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:36 AM";"it gets mined";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:37 AM";"notarized";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:37 AM";"then nspv can verify it is notarized";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:37 AM";"why would all nspv nodes have to do anything about some random other nodes crosschain tx?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:37 AM";"nspv nodes only care about a single address at a time";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:37 AM";"No I was meaning for full nodes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:38 AM";"if the nspv is making a valid tx, what is the problem?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:38 AM";"when nspv makes a tx and broadcasts it, all fullnodes validate it";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:38 AM";"how is a crosschain CC tx any different?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:39 AM";"OK so full node just uses momom?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:39 AM";"nspv can get the notarization tx right?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:40 AM";"that notarization tx has MoMoM data";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:40 AM";"If u can find it";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:40 AM";"we might need a bit of fullnode help to achieve this";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:40 AM";"adding a new p2p message is not hard, just a lot of places to add things to";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:41 AM";"or we could use the baggage claim path, which might be less work and possible without any extra fullnode support";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:41 AM";"the power of nspv is that given a txid, we can prove it happened";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:41 AM";"which means we can prove the burn happened";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:41 AM";"That path requires a proof from x notaries";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:41 AM";"Yes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:42 AM";"ah, forgot that detail...";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:42 AM";"ok so what is needed to use MoMoM for this case";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:42 AM";"Any node can prove, a tx happened on another chain as long as they can spawn an nspv and validate it";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:43 AM";"what is required to create a valid import?";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:43 AM";"that seems the harder half";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:43 AM";"Momom will do it, as long as the node that creates the tx gives a momom hash that exists on the target";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:43 AM";"or given a valid burn and a properly constructed import, will the fullnodes automatically be able to validate it as it is";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:44 AM";"nspv nodes can get momom hashes from the notarizations, it is in the opreturn. so the opreturn parsing needs to expand to extract the momom data";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:45 AM";"are all the pieces there already do to a momom cross chain?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:46 AM";"Yes I think I got it. Right now a successful momom transfer needs kmd node to get the momom and add it to the import tx, it keeps trying this until it gets the right hash, nspv has less work to do there";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:46 AM";"if not, maybe txproof request can also return whatever missing momom data needed";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:46 AM";"Yes";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:47 AM";"so the KMD fullnode can do the scan of momom given a txid and return the correct momom to use, and with just adding a single field it seems nspv gets all the data with almost no overhead on the superlite side. maybe we only do this on the fullnode side if there is a specific flag set";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:48 AM";"which means multinspv needs to spawn KMD, oldchain, newchain, so 9MB overhead";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:50 AM";"there can literally be thousands of chains in the cluster and any user would just need to occasionally spawn some new nspv instances to deal with the crosschain and at most run the nspv for the chains they have coins on. or even launch them only as needed, as it takes no time to launch a new nspv instance";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:50 AM";"can even be stateless locally, ie. no data needed on HDD. to manage coins that can be in any of 8192 chains, but at that scale it might make sense to have a list of which chains we know we have coins on";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:51 AM";"what all this means is we dont need to make a globals structure!";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:52 AM";"No I don't think we need to either";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:52 AM";"That's a lot of work";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:52 AM";"we can simply use global variables in nspv, very easy";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:52 AM";"i estimate it would take me a full day and it doesnt give any real benefits";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:53 AM";"Take me longer than that, I estimated about a week lol";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:54 AM";"ok, so you think you can tackle the crosschain via nspv using a multinspv (maybe we call it the jaragua client)";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:55 AM";"Yeah, I think we can do that, have some master process that spawns what ever chain it needs and RPC to it";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:55 AM";"yes, pretty sure iguana already does this";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:55 AM";"making it cross platform and working in windows might be a bit of a trick";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:56 AM";"but i think even windows is able to launch executables";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:56 AM";"Maybe it can just spawn itself as a thread?";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:56 AM";"Not sure if possible";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:57 AM";"in unix and osx you can just do system(""./nspv KMD"");";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:58 AM";"pretty sure windows has a similar method, so for now, just use that to spawn the nspv instances";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 09:58 AM";"that gets the rpc port active and you can just libcurl the api requests";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:59 AM";"Its like boost::thread or something, komodod does it for blocknotify";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 09:59 AM";"Np";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 10:00 AM";"thankfully we cant contaminate libnspv with boost!";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 10:00 AM";"Yes, lol";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 10:01 AM";"But the call exists in boost so it will work, just need to find out what it is that call calls";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 10:01 AM";"good luck with that. windows docs are probably a faster way, or just ask decker";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 10:02 AM";"Why not just depreciate windows 🤣";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 10:03 AM";"anyway, glad we talked this out. we now have a clear mandate to keep things as simple as possible and single threaded nspv will work fine, in a multi nspv instance environment. one jaragua to manage the many nspv, which means the nspv is smaller than a jaragua";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 10:04 AM";"Hmm";"";"";
"232679450301431808";"blackjok3r#3181";"30-Jul-19 10:05 AM";"So what will nspv be called? Not a lizard I guess";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 10:09 AM";"likely people wont directly use nspv, but rather the multicoin variant, jaragua.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 10:10 AM";"since people like multicoin wallets, it seems that is the level they will interact. similar to nspv jaragua can spawn an rpc port and serve html in the same style and interlinked with the nspv html";"";"";
"272003866906722306";"TonyL#3577";"30-Jul-19 11:54 AM";"";"https://cdn.discordapp.com/attachments/594906735467036682/605729833644720130/dwarf-gecko.png";"";
"347922216429813760";"grewalsatinder#9653";"30-Jul-19 12:18 PM";"""jaragua client"" 😍";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 12:29 PM";"a pizza sized coin?";"";"";
"272003866906722306";"TonyL#3577";"30-Jul-19 12:30 PM";"just zoomed photo 😅";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 12:35 PM";"@blackjok3r your validate_notarization function is passing in the notarization value but not using it. maybe it needs to be checked against NSPV_inforesult.notarization.txid also?";"";"👍 (1)";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 01:40 PM";"Noticed while writing tests:
Some time after starting nspv daemon (~60s or so), mempool,  listunspent, listtransactions and spentinfo calls will return error:
```json
{""result"":""error"",""error"":""timeout""}
```
Same calls work just fine executed right after getinfo call.

A simple script to reproduce it:
```python
    while True:
        rpc_call = tf.nspv_getinfo()
        tf.assert_success(rpc_call)
        rpc_call = tf.nspv_mempool()
        tf.assert_success(rpc_call)
        time.sleep(70)
        rpc_call = tf.nspv_mempool()
        tf.assert_success(rpc_call)
        time.sleep(70)
```
Always fails on second mempool call.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 01:41 PM";"there is a rate limiter of one request per second per peer, for each message";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 01:42 PM";"depending on how many peers you have, it will determine how many requests you can blast away";"";"";
"262577806456782848";"Sir Seven#7158";"30-Jul-19 01:42 PM";"Hm. Still, 70 seconds sounds legit.";"";"";
"455741312273219595";"jl777c#5810";"30-Jul-19 01:44 PM";"you shouldnt have to sleep for any more than 1 second";"";"";
