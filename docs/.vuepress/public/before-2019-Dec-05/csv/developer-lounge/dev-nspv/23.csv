AuthorID;Author;Date;Content;Attachments;Reactions;
"272003866906722306";"TonyL#3577";"25-Jul-19 05:05 AM";"Pinned a message.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:14 AM";"error datalen.0";"";"";
"272003866906722306";"TonyL#3577";"25-Jul-19 05:14 AM";"To start use libnspv:
```git clone https://github.com/jl777/libnspv
cd libnspv
./autogen.sh
./configure
make
./nspv
now you can issue curl commands as in ~/src/tools/nSPV_testvectors```";"";"";
"272003866906722306";"TonyL#3577";"25-Jul-19 05:14 AM";"Pinned a message.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:14 AM";"a timeout would create no data, error message is just not accurate";"";"👌 (1)";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:22 AM";"@blackjok3r nice PR! dynamic peers, getpeerinfo and a bugfix for my opreturn extract!";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:22 AM";"Yes I surprised myself, getting it done so fast. 😃 Long day though.";"";"rum (1)";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:23 AM";"all in C, no magic";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:23 AM";"makes it easy to get to the bottom of things";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:23 AM";"That slowed me down a fair bit, some crazy pointers used in there to get the duplicate peer fitler to work.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:24 AM";"better than buried in some template for a class for some data type that isnt even clear what structure it has";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:25 AM";"This is true, I had to use libevent code to get the correct structures.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:25 AM";"anyway, as you see, it is very easy to add new api, so feel free to port over whatever is useful from iguana as i want to use libnspv as the codebase for useful crypto things";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:26 AM";"next step is to get a html wallet, but only using static html and having nspv dynamically generate it. that was there is no attack surface outside of nspv";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:26 AM";"mihailo is adding CC support to the komodod -nSPV=1 and it seems most all can be ported, but that is indeed a lot of custom tx construction";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:26 AM";"still for a specific CC, it wouldnt be that much work to add nspv support for it";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:27 AM";"unless it needs a lot of blockchain data";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:27 AM";"Yes, my idea was to just make a seperate libnspv for each contract. Hopefully get the lotto thing I made for LABS working with nSPV in new few weeks";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:27 AM";"the trick to solve that was to add fullnode p2p message support for getting the data more efficiently";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:27 AM";"Although that pulls thousands of utxos for the first validation 🤔";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:28 AM";"can just make a new api function with the tx construction. nspv does not have to validate";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:29 AM";"listunspent/listtransactions got a new ""filter"" parameter that can be used to have the fullnode filter out the big list of unspents/txids and return only what fits. it is 32 bits total and i think 16bits might be allocated already";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:29 AM";"on the build side, i think it works in osx now. also windows and even 32 bit CPU might work";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:30 AM";"Could always moce those heavy calls to a full node?";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:30 AM";"or that is not practical?";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:30 AM";"yes, can always add a new p2p message";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:31 AM";"that does require defining the structure (request and response), (de)serializer, issuing, global results and the message handling and the actual function that does it,";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:31 AM";"all the existing messages follow the same pattern, so it shouldnt be too hard to figureout (after you are having the sleep)";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:32 AM";"yes 😃 very much needed.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:32 AM";"it is a ""hardfork"", so if any new messages are needed, sooner is better than after it spreads to the wild";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:32 AM";"can have differentl level of fullmodes via the NODE_NSPV nService bits";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:32 AM";"anyway, great work!";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:33 AM";"you are up to speed on nspv";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:33 AM";"In 1 day 😄";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:33 AM";"it is 300kb of code total, just the pure essentials for doing transaction";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:34 AM";"borrowed heavily from iguana though";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:34 AM";"Its really nice i like it. Simple and eas to follow, as long as you understand pointers";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:34 AM";"sort of the new iguana";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:34 AM";"it is C, and assumed you understand pointers";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:34 AM";"but yes, mosts coders i guess are afraid of them";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 05:35 AM";"but use them indirectly and then cant figure out what is going on as they dont understand what is actually happening";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 05:36 AM";"yep, 😃 well I should get some rest. Let all this information sink in before I forget it";"";"";
"206445134122844170";"Slyris#2880";"25-Jul-19 06:30 AM";"@jl777c C pointers are not that hard.";"";"";
"206445134122844170";"Slyris#2880";"25-Jul-19 06:30 AM";"But yeah for novices sometimes it's can make you afraid";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 07:25 AM";"@Slyris  
`if ( memcmp(&((struct sockaddr_in*)&existing_node->addr)->sin_addr, &((struct sockaddr_in*)&node->addr)->sin_addr, sizeof(&((struct sockaddr_in*)&existing_node->addr)->sin_addr)) == 0 ) ` I was reffering to this line in particular. Took me a while to get that right 😅";"";"";
"206445134122844170";"Slyris#2880";"25-Jul-19 07:26 AM";"yeah common c stuffs which are boring to read i agree with you";"";"";
"206445134122844170";"Slyris#2880";"25-Jul-19 07:27 AM";"which just mean i compare the memory of two pointers with the size of this pointer.";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 07:42 AM";"I am not able to broadcast this hex
```bash
curl --url ""http://127.0.0.1:7771"" --data ""{\""userpass\"":\""$userpass\"",\""method\"":\""broadcast\"",\""hex\"":\""0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a473044022074796d0391cda193a75960e0107c2884919e669091e280efa29290ca7a411ec1022032545e6728a8c15855f12f692a85cec0e8ebee138051118d28f29fde79f4dea901210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0280969800000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88acc842620b0000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac6a5e385d000000000000000000000000000000\""}""
```
response:
```json
{""result"":""success"",""expected"":""4fc9c5835817dc859e2f8daf829e3b307ceaf27778bea2cc5905adb01348afc8"",""broadcast"":""0000000000000000000000000000000000000000000000000000000000000000"",""retcode"":-2,""type"":""timeout"",""lastpeer"":""nodeid.1""}
```";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 08:22 AM";"Seems a timeout? I think we wil need some extra error handling added for this in future. Did it work if you try again?";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 08:28 AM";"I've tried many times
it didn't work at all @blackjok3r";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 08:46 AM";"on KMD?";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 08:47 AM";"Could be plenty of things, other calls work? Just not broadcast? I didnt actually test sending anything just the building txns";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:16 AM";"@gcharang have you documented both the nSPV=1 for komodod and nspv?
nSPV=1 if added to the standard komodod puts it in nSPV superlite mode. it can also do most of the CC tx";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:17 AM";"with nspv you specify the coin. it currently doesnt have a cli (though somebody could write such a program without much trouble)";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:17 AM";"curl of the JSON is one way";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:17 AM";"http GET via url construction http://127.0.0.1:8901/method/getinfo";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:18 AM";"another way is POST, but not sure how to do that via browser";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:18 AM";"i am also adding a json 2.0 compatible way of having a ""params"":[] array with the arguments inside it";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:19 AM";"and i think all the different ways needs to have specific examples to make it easy.  i heard using params array there are many existing tools to issue the api requests";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:19 AM";"also a few details that might not be apparent. for txproof if you dont pass in the height, it wont return the merkleproof, but just the rawtx, so it is like getrawtransaction";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:20 AM";"list commands (unspent transactions) have a skipcount that lets you skip the first n entries, but it will always return the last entry, so it is an easy way to see if any new funds came in and confirmed, ie wait for the most recent utxo to change";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:22 AM";"it also has a new filter field, which will be used to filter the list using filter specific defined values. this is to allow efficient support for CC tx creation that often has to search through many tx. also there is a CCflag that specifies whether you are looking for a CC address or a normal (p2pk, p2pkh, p2sh) address";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:22 AM";"new mempool functions exist which range from returning the entire mempool, but also able to have a subset matching search parameters returned. please ask if anything is unclear";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:23 AM";"@blackjok3r i think having an api call that exposes the internal gettransaction is a good new api to add as that will allow to get the specific retcode for that utxo. 0 means it is notarized, many errors possible during the notarization validation";"";"👍 (1)";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:28 AM";"@Bryan_Beus not sure about your workload, but nspv has come a long ways pretty quick and is close to being beta, so getting it properly documented seems a good idea. focus on rapid integration to anything that wants to securely connect to any of the ecosystem coin networks directly and do transactions, or just get explorer level data";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 09:29 AM";"I am working on documenting the libnspv";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:30 AM";"most all of the functionality is the same with nSPV=1, so it might make sense to document them both with the same? just have a section on how to use each one, which is where the main difference is";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 09:44 AM";"@jl777c I will reuse the content
but I think documenting them ""komodod -nspv=1"" and ""./nspv"" seperately is better

for komodod it will go along with the komodo-api
for libnspv, installation is different and command names are different so, having a seperate space for it makes things easier";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:45 AM";"-nSPV=1 not -nspv";"";"👍 (1)";
"455741312273219595";"jl777c#5810";"25-Jul-19 09:45 AM";"ok, separate is fine, you know best the way to document";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 09:47 AM";"I am not able to broadcast this hex
```
curl --url ""http://127.0.0.1:7771"" --data ""{\""userpass\"":\""$userpass\"",\""method\"":\""broadcast\"",\""hex\"":\""0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e0010000006a473044022074796d0391cda193a75960e0107c2884919e669091e280efa29290ca7a411ec1022032545e6728a8c15855f12f692a85cec0e8ebee138051118d28f29fde79f4dea901210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ffffffff0280969800000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88acc842620b0000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac6a5e385d000000000000000000000000000000\""}""
```
response:
```
{""result"":""success"",""expected"":""4fc9c5835817dc859e2f8daf829e3b307ceaf27778bea2cc5905adb01348afc8"",""broadcast"":""0000000000000000000000000000000000000000000000000000000000000000"",""retcode"":-2,""type"":""timeout"",""lastpeer"":""nodeid.1""}
```

@jl777c any idea why this could be happening?
I am using the libnspv repo 
master branch
for the KMD coin
rest of the calls are working";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 09:57 AM";"master may not be right, I was using jl777 branch, and make my PR to dev.";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:01 AM";"problem is tx is too big. currently it seems it only supports <254 byte tx. needs to be fixed";"";"👌 (1),👍 (1)";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:07 AM";"@jl777c 
```bash
curl --url ""http://127.0.0.1:7771"" --data ""{\""userpass\"":\""$userpass\"",\""method\"":\""broadcast\"",\""hex\"":\""0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e00100000000ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac807b395d000000000000000000000000000000\""}""
```
```json
{""result"":""success"",""expected"":""2015d49eda9dfb1986c9f3e434af0f140c0b1aea2b0fe34a7fd94fa6579f8466"",""broadcast"":""2015d49eda9dfb1986c9f3e434af0f140c0b1aea2b0fe34a7fd94fa6579f8466"",""retcode"":-3,""type"":""error adding to mempool"",""lastpeer"":""nodeid.1""}
```
jl777 branch
KMD coin";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:09 AM";"are all inputs unspent?";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:10 AM";"yes
I just created the hex using the spend rpc
this is the address: https://kmdexplorer.io/address/RFmQiF4Zbzxchv9AG6dw6ZaX8PbrA8FXAb
last txn was 3 days back";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:12 AM";"please decode it";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:12 AM";"look at the scriptSig";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:12 AM";"notice you have no signature";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:13 AM";"what was the response when you did the spend api";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:13 AM";"what retcodes";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:14 AM";"```json
{
  ""rewards"": ""0.00000000"",
  ""validated"": ""0.00000000"",
  ""tx"": {
    ""nVersion"": 4,
    ""vin"": [
      {
        ""txid"": ""e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855"",
        ""vout"": 1,
        ""scriptSig"": """",
        ""sequenceid"": 4294967295
      }
    ],
    ""vout"": [
      {
        ""value"": 1,
        ""scriptPubKey"": ""76a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac""
      },
      {
        ""value"": 1.00989,
        ""scriptPubKey"": ""210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06ac""
      }
    ],
    ""nLockTime"": 1564048346,
    ""nExpiryHeight"": 0,
    ""valueBalance"": 0
  },
  ""result"": ""success"",
  ""hex"": ""0400008085202f890155c894ada147bf184bb7dff790ca429e6860775d3bb471dc0f69a28f080977e00100000000ffffffff0200e1f505000000001976a9144726f2838fc4d6ac66615e10604e18926e9b556e88ac48f804060000000023210217a6aa6c0fe017f9e469c3c00de5b3aa164ca410e632d1c04169fd7040e20e06acda7b395d000000000000000000000000000000"",
  ""retcodes"": [-1],
  ""lastpeer"": ""nodeid.1""
}
```";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:14 AM";"retcode -1";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 10:14 AM";"You need the stdout prints just before it gave you that, I saw the same problem randomly.";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 10:14 AM";"Wasnt able to isolate it and put it down to bad full nodes";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:15 AM";"do I need to sign the hex using another rpc?";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 10:17 AM";"no its bugged out";"";"👍 (1)";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 10:17 AM";"I found restarting enough times eventually made it work for me.";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:17 AM";"```
got broadcast response 1564049787 size.37 2015d49eda9dfb1986c9f3e434af0f140c0b1aea2b0fe34a7fd94fa6579f8466 retcode.-3
```
this is the stdout print when when I broadcast the txn that gives retcode -3";"";"";
"232679450301431808";"blackjok3r#3181";"25-Jul-19 10:17 AM";"Its not the broadcast thats failing but the creation of the tx";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:18 AM";"aha ok";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:22 AM";"I used the spend rpc again
stdout:
```
ADD CACHE txproof e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855
got txproof response 1564049904 size.1956 e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855 ht.1453881
ADD CACHE ntzsresp req.1453881
got ntzs response 1564049905 size.213 d1cb409da9df970f6d76772949b95bf0426669c4302a02ec1fa293b5dbd37e61 prev.1453860, 073badddc89d1dba8d63f83a62d3a1b838b56f95451f9ab579d81f192910f2a4 next.1453890
>>>>> gettx ht.1453881 prev.1453860 next.1453890
got ntzproof response 1564049910 size.49363 prev.1453860 next.1453890
 ntzht.1453890 09972e40397716f1b10391461fec47ae3fb15f30e0a9cfa02f6a0a8329fc0e92 <- size.74
got ntzproof response 1564049911 size.49363 prev.1453860 next.1453890
 ntzht.1453860 06d3e950d67a605eb34f19c2bb78712db60da7277685284d8fa25c6465c3f7a4 <- size.74
e07709088fa2690fdc71b43b5d7760689e42ca90f7dfb74b18bf47a1ad94c855 merkleproof validated!
304402206774ff903a8a4b73bcd5a79fe5c744f34d2263160cd8877c198c2228c66a8a42022063e1d2d6403c395e3472a6a509f01cbff0b90e3413bc6f7bc492649302a4a640 sighash d99eee9af952262317fab23ca49f0d9e9b085537dc33b46aedbc40ffdd1f6d07, sigerr.0 siglen.106
sign 1 inputs 2.00999000 + interest 0.00000000 -> 2 outputs 1.00000000 change 1.00989000
```
response came with retcode 0 now

but the hex seems to be too large
```
len.292 overflow for 1 byte varint
```";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"""scriptSig"": """",";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"that is invalid tx, no signatures";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"retcode of -1 is a failure";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"0 means notarized";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"-200x means it is mostly ok, just not notarized";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:24 AM";"pushed a fix for overflow 1 byte varint";"";"";
"455741312273219595";"jl777c#5810";"25-Jul-19 10:26 AM";"jl777 branch";"";"";
"423176312354635779";"gcharang#6833";"25-Jul-19 10:27 AM";"building";"";"";
