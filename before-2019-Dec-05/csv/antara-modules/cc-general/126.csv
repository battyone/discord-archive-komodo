AuthorID;Author;Date;Content;Attachments;Reactions;
"412482228359266328";"CrisF#3405";"08-Nov-18 12:08 PM";"I'm looking for info on it like `channels.cpp` has.";"";"";
"455741312273219595";"jl777c#5810";"08-Nov-18 12:11 PM";"migration is pre-CC method";"";"";
"412482228359266328";"CrisF#3405";"08-Nov-18 12:12 PM";"Oh!  Thank you.";"";"";
"439780323497082880";"CMaurice#1685";"08-Nov-18 12:12 PM";"it's a one-way peg, in effect isn't it?";"";"";
"455741312273219595";"jl777c#5810";"08-Nov-18 12:13 PM";"it is a N:N peg";"";"";
"455741312273219595";"jl777c#5810";"08-Nov-18 12:13 PM";"any chain in the cluster to any other chain";"";"";
"439780323497082880";"CMaurice#1685";"08-Nov-18 12:13 PM";"not quite sure what imagined use cases for it are, would like to hear some";"";"";
"455741312273219595";"jl777c#5810";"08-Nov-18 12:14 PM";"it ensures the total coins across the cluster stays the ssame";"";"";
"439780323497082880";"CMaurice#1685";"08-Nov-18 12:15 PM";"thanks, that helps a bit";"";"";
"365714438864633856";"dukeleto#7326";"08-Nov-18 01:55 PM";"@Mihailo if you pass an object around that contains an error (or JSON or whatever), you will need to change a lot of code. Such as when funcA calls funcB which calls funcC, you are going to be passing that object/json around many layers of the call stack, managing it/etc. It's much easier to use the `CCerror` global, and then each RPC checks if `CCerror` has been set, and if it has, renders the error in JSON response correctly. There is even a macro for it, it's just `RETURN_IF_ERROR(CCerrror)` and you are done";"";"";
"424224648889106444";"Mihailo#5902";"08-Nov-18 02:00 PM";"@dukeleto I ment just for the CC RPC function. Like we are returning string now and then in rpcwallet correspondent function we check if it is not empty and then push success and hex into result UniValue. So I meant we could use UniValue in CC function and push Pair(""hex"",hex) if it is ok, or Pair(""error"",error_String) if it did not went ok. And in rpcwallet we can add result state and return that.";"";"";
"424224648889106444";"Mihailo#5902";"08-Nov-18 02:01 PM";"But it is similair to CCerror with a lot more code change, so as I said maybe it is easier to use CCerror 😉";"";"";
"365714438864633856";"dukeleto#7326";"08-Nov-18 02:04 PM";"@Mihailo dicebet and one other internals function was using the `error` variable as an arg, but I just changed that to use CCerror like everything else. That way, it can catch an error set by a function 2 call levels deep, instead of only an error caught in that call level (hope that makes sense)";"";"";
"365714438864633856";"dukeleto#7326";"08-Nov-18 02:04 PM";"various CC's still don't have much error checking, and need this ported";"";"";
"365714438864633856";"dukeleto#7326";"08-Nov-18 02:05 PM";"the ERR_RESULT and RETURN_IF_ERROR macros make things a lot less annoying 😃";"";"";
"424224648889106444";"Mihailo#5902";"08-Nov-18 02:08 PM";"👍";"";"";
"369608312955731968";"Bryan_Beus#6442";"08-Nov-18 08:53 PM";"I'm working on the last few cc documentation stuff, before we can finally soft-launch this new streamlined documentation.

On the `channels` documentation, I don't see any existing docs in the repo:

https://github.com/KomodoPlatform/Documentation/tree/master/docs/source/cc/contracts/channels

Is there anyone with a channels cc chain up and running that can help me work on docs, either today or tomorrow?

I need someone to give me a basic description of what the channels cc is all about, make a list of all rpc calls, make a very simple one-sentence explanation for each rpc call, and show the arguments/structure the call takes.

And then I need this person to execute a full example of the command in the terminal, copy paste that to me, and also copy paste the full response to me. 

I can do some of this by myself, but not all of it, and it is much slower as I don't know anything about how channels works or what it does.";"";"";
"455741312273219595";"jl777c#5810";"08-Nov-18 08:54 PM";"@Mihailo is the one that did the channels";"";"";
"424224648889106444";"Mihailo#5902";"08-Nov-18 08:55 PM";"@Bryan_Beus I can give you a hand tomorrow with channels CC...";"";"";
"369608312955731968";"Bryan_Beus#6442";"08-Nov-18 08:55 PM";"great, thank you very much";"";"";
"369608312955731968";"Bryan_Beus#6442";"08-Nov-18 08:56 PM";"let me know when you're available. I'm generally around somewhere between 4pm to 12am UTC.";"";"";
"424224648889106444";"Mihailo#5902";"08-Nov-18 08:56 PM";"Ok, lets do it around 4pm if you can...";"";"";
"369608312955731968";"Bryan_Beus#6442";"08-Nov-18 08:57 PM";"sounds good, that's usually when I start work";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:44 AM";"What's a ""baton"" in the oracles cc?";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:44 AM";"anyone know?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:45 AM";"a utxo that is spent by the next transaction in the chain";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:45 AM";"think of the baton in a relay race as the runners pass the baton to the next runner";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:45 AM";"there is mutual exclusivity, as there is only one baton";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:45 AM";"and you can find the tip of the linked list by finding the baton utxo";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:47 AM";"I'm a little familiar with linked lists. did some exercises in my programming classes.

so, the baton is the next transaction that will be awarded to the publisher upon a data upload?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:47 AM";"it is a marker, used to track each list";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:48 AM";"not the datafee";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:48 AM";"so, you could look up the utxo that's marked as a baton, and in that utxo, there is a cc property that tells you what the next utxo is in that list?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:49 AM";"it is the property of the blockchain";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:49 AM";"the previous utxo, is in the input";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:49 AM";"so you can just keep finding the previous tx in the baton chain";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:49 AM";"you know like a linked list";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:50 AM";"that makes a little sense";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:50 AM";"not only can you find the most current datapoint, you can traverse it backwards to the very beginning";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:50 AM";"you need to understand linked list";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:50 AM";"in this case a backwards linked list";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:50 AM";"I'm still confused about what utxo specifically we're talking about, if it's not the datafee paid to the publisher?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:50 AM";"the transactions vouts -> vins creates a backwards linked list";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:50 AM";"it is a special baton utxo";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:51 AM";"sole purpose is to be a baton";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:51 AM";"it gets a free ride as the txfee for the transaction and datafee are already taken care of";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:51 AM";"that part I think makes sense.

You're saying that blockchains have a built-in property that show how to link one utxo to another. So, you can mark one utxo as a baton, and then trace its history backwards using the normal blockchain propertiees. Is that correct?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:51 AM";"yes";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:52 AM";"it is literally a backward linked list";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:52 AM";"This part still confuses me a bit. Not sure how well I need to understand it to write documentation, but I'm not quite able to describe this yet.

```
sole purpose is to be a baton
it gets a free ride as the txfee for the transaction and datafee are already taken care of
```";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:52 AM";"and for oracle that is exactly the data structure you need to be able to find all the historical data samples";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:52 AM";"I get the part that you're saying, but I don't get why we need a baton.

Does each publisher get a unique baton?";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:52 AM";"Or does the baton change over time?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"ok, think about a publisher that is publishing a stream of data";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"each one gets a txid";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"how would you find the most recent one?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"how would you find all of them?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"how would you know the sequence?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:53 AM";"each publisher gets a baton";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:54 AM";"each data sample spends the baton and makes a new one";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:54 AM";"""each one gets a txid""

by this, do you mean this:

each publisher gets a unique txid, which comes from the `oraclesregister` rpc call? (after doing `sendrawtransaction`)?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:54 AM";"you understand that the publisher needs to publish data";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:54 AM";"he does that by making a transaction";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:54 AM";"ok";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:54 AM";"each transaction gets a txid";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:55 AM";"ok";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:55 AM";"if a publisher publishes a million data points, there is a million txids";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:55 AM";"ok";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:55 AM";"how would you organize this?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:55 AM";"how would you even find them all?";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:55 AM";"hmm, interesting";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:55 AM";"you could make a DB and database all the txids...";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:55 AM";"but that would require a special DB";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:56 AM";"but that would be difficult for every publisher to manage on their own

easier to keep it managed on-chain";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:56 AM";"so instead of the overhead of having a custom DB to track each publishers data samples, I came up with the baton utxo";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:56 AM";"ok";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 12:56 AM";"and the baton utxo comes from the most recent data-related txid that the publisher created?";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:57 AM";"now there can be thousands of publishers all publishing millions of samples and we have billions of txids";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:57 AM";"when the publisher registers, he creates the first baton";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:57 AM";"the first datasample spends the first baton and makes the second";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:57 AM";"the next datasample spends the second an makes the third";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:58 AM";"register:
 vins.*: normal inputs
 vout.0: txfee tag to normal marker address
 vout.1: baton CC utxo
 vout.2: change, if any
 vout.n-1: opreturn with oracletxid, pubkey and price per data point";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:58 AM";"data:
 vin.0: normal input
 vin.1: baton CC utxo (most of the time)
 vin.2+: subscription or data vout.0
 vout.0: change to publishers CC address
 vout.1: baton CC utxo
 vout.2: payment for dataprovider
 vout.3: change, if any
 vout.n-1: opreturn with oracletxid, prevbatontxid and data in proper format";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 12:58 AM";"this is why I carefully define all inputs and outputs";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:00 AM";"so given the most recent datasample txid, the baton utxo is txid/v1";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:00 AM";"we look at vin1 to find the previous datasample";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:00 AM";"all the way to the initial register";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:00 AM";"I think I got you here

so, you may have said this already, but I wasn't clear enough on what a baton is to understand.

is the baton the txid hash of the utxo in question?";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:01 AM";"ok ya";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:01 AM";"I think that's what you just posted";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:01 AM";"```so given the most recent datasample txid, the baton utxo is txid/v1```";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:01 AM";"the baton is a bitcoin utxo";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:01 AM";"with special purpose";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:01 AM";"its purpose is not to make a payment";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:01 AM";"its purpose is to replace the need for a database";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:13 AM";"ok, could we say it like this ? being a bit verbose here, to make sure I understand:

to understand the baton property, one must first understand the problem that it solves.

a publisher publishes data to an oracle

he does this by creating a transaction, using the `oraclesdata` method

when completed (after broadcasting the hex using `sendrawtransaction`), this method returns a txid

if there was only one such txid, it would not be difficult to keep track of it

however, as each publisher is likely publishing lots of data, and thus creating lots of txids, and there are also many publishers, this could result in a state of disorder. It would be difficult to know which data is the most recent, or how data in a contract is related to other data, etc. 

To solve this problem without using centralized and/or external databases, it is easiest for each publisher to have an automatically managed linked list.

This linked list keeps track of the txids submitted by a publisher to a oracle contract, and keeps them in order.

When a publisher first registers for an oracles contract, the returned txid of the `oraclesregister` command (after `sendrawtransaction`) is the first baton.

When the publisher uploads their first data publication to the chain, using `oraclesdata`, the baton property for this publisher in the master `oracles` contract updates to the `txid` returned from the data publication.

Likewise each time they upload data to the chain.

By the nature of blockchain data structure, each utxo txid is already a linked list leading back in time. 

The baton, therefore, points to the txid of the most recently created utxo for this publisher. By finding that utxo, you can find the previous utxo created by this publisher, on this contract, and so on, all the way until you find their first `oraclesregister` utxo (and so on).";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:14 AM";"yes";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:14 AM";"great, thanks";"";"";
"369608312955731968";"Bryan_Beus#6442";"09-Nov-18 01:14 AM";"I'll put this in the introduction";"";"";
"455741312273219595";"jl777c#5810";"09-Nov-18 01:14 AM";"it is likely the most efficient DB ever created";"";"";
