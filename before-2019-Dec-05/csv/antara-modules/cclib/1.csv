AuthorID;Author;Date;Content;Attachments;Reactions;
"347922216429813760";"grewalsatinder#9653";"20-Jan-19 11:38 AM";"üòÉ :Komodo: :shexy: üòé";"";"‚òù (1)";
"462352235704090636";"KevinS#0577";"23-Jan-19 08:35 PM";"@jl777c question about this new call, -ac_cclib=<name>. while designing the user experience for chainlizard, one of our thoughts was that someone can create multiple clusters and name them before they even create a chain, since creating a cluster (i.e. 'purpose') first is more intuitive than creating a chain then choosing an un-named cluster by integer.

is this essentially what this allows? that is my assumption from @Mylo's tech tuesdays, but i wanted to confirm.";"";"";
"371114647052615681";"Mylo#8306";"23-Jan-19 11:36 PM";"**Edit for wrongness**:
- Clustering comes from -ac_cc=XXX   which is just an id shared by the cluster.
- ~~The -ac_cclib=<name> is used for a filename to load. ~~

~~Maybe <filename> would have been a better description?~~
@KevinS üëÜ";"";"";
"371114647052615681";"Mylo#8306";"23-Jan-19 11:44 PM";"That name has your ""dynamic loadable library"".  What I call ""mycustomlib"" is different to ca's ""mycustomlib"" because we both load them at chain start up on totally different chains, presuming we are working indepdently on separate stuff.

To further illustrate:

- I've created a single chain and enabled crypto conditions and started it with -ac_cclib=MyloGameLibrary set of crypto conditions.
- I've then created another single chain, enabled crypto conditions and started it with -ac_cclib=BetterGameLibrary set of crypto conditions.
- I've made MyloGameLibrary come with a set of 5 specific game library conditions.
- The BetterGameLibrary includes the 5 from MyloGameLibrary plus an additional 10 that enables extra in-game functionality.

The cluster id is just an identifier (but has to be a number), it could be randomly made up - as long as all the chains in the cluster share the same random number.";"";"";
"405011811511828481";"Alright#0419";"23-Jan-19 11:46 PM";"ac_cclib is not the file name, rather how the cc is defined in cclib.so";"";"";
"405011811511828481";"Alright#0419";"23-Jan-19 11:47 PM";"https://github.com/jl777/komodo/blob/af8f3f4938471b5af94a2df144ad1b2ef8b22465/src/cc/cclib.cpp#L44";"";"";
"371114647052615681";"Mylo#8306";"23-Jan-19 11:47 PM";"ah damn...i jumped the gun pre-coffee.";"";"";
"405011811511828481";"Alright#0419";"23-Jan-19 11:47 PM";"`ac_cclib=faucet2`";"";"üôè (1)";
"371114647052615681";"Mylo#8306";"23-Jan-19 11:49 PM";"`The name specified in -ac_cclib must match the name inside cclib.cpp` <-- from tech tuesday ü§¶";"";"";
"462352235704090636";"KevinS#0577";"24-Jan-19 02:53 PM";"@Mylo i'm still a little confused on ac_cclib. i understand ac_cc integer and setting that, but for a user, setting an integer doesn't really make much sense. it would make more sense for them to set a purpose for a cluster which they then assign an integer, or the app sets it for them after they choose whether it should be fungible (>100) or interoperable (<100)";"";"";
"462352235704090636";"KevinS#0577";"24-Jan-19 02:55 PM";"from what @Alright is saying, it sounds like the ac_cclib should do that?";"";"";
"462352235704090636";"KevinS#0577";"24-Jan-19 02:58 PM";"or maybe i'm completely off base here.";"";"";
"455741312273219595";"jl777c#5810";"24-Jan-19 03:03 PM";"cclib allows to create a custom CC has nothing to do with clusterid";"";"";
"371114647052615681";"Mylo#8306";"25-Jan-19 12:39 AM";"@KevinS will DM you for voice chat details.
depends on app workflow and if there's state (db) saved before and after launch of the chain project.
if you are creating a table, and ppl can plan stuff, then hit <the button> to start the chain(s), then at runtime it could just decide on a clusterid if required.";"";"";
"462352235704090636";"KevinS#0577";"25-Jan-19 05:46 AM";"@jl777c  ah sorry, i was confused since -ac_cc refers to clusters, i just assumed anything ac_cc were related";"";"";
"455741312273219595";"jl777c#5810";"25-Jan-19 07:39 AM";"-ac_cc < 100 is not a cluster";"";"";
"455741312273219595";"jl777c#5810";"25-Jan-19 07:39 AM";"and CC is certainly more than just about clusters";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:14 AM";"what is the current status of cclib";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:14 AM";"I'm wondering if it's possible to use with hardcoded EVAL codes";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:15 AM";"As in I'd like to use it to test the hardcoded CCs without rebuilding full daemon to test each edit";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:20 AM";"support for mapping hardcoded CC into cclib would need to be supported";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:20 AM";"seems tricky";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:23 AM";"will this be the default way of adding new CCs or will we still continue to add hardcoded ones?";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:23 AM";"I rather like that all the RPC stuff is in the CC code itself rather than scattered around the daemon";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:23 AM";"i think both ways";"";"";
"405011811511828481";"Alright#0419";"27-Jan-19 11:28 AM";"pros and cons of each?";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:32 AM";"yes";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:32 AM";"six reasons for one, half a dozen for the other";"";"üòÑ (2)";
"405011811511828481";"Alright#0419";"27-Jan-19 11:46 AM";"sorry, what are the pros and cons of each";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:46 AM";"pro for hardcoded is that it is hardcoded";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:46 AM";"pro for cclib is that it is flexible";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:47 AM";"con for hardocoded is that it isnt flexible";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:47 AM";"con for cclib is that it isnt hardcoded";"";"";
"455741312273219595";"jl777c#5810";"27-Jan-19 11:47 AM";"seems very hard to decide which is better";"";"üòÇ (2),üòÜ (1)";
"365714438864633856";"dukeleto#7326";"28-Jan-19 02:59 AM";"each way may be less friction for different workflows, @Alright";"";"";
"371114647052615681";"Mylo#8306";"28-Jan-19 11:32 AM";"horses for courses";"";"";
"371114647052615681";"Mylo#8306";"28-Jan-19 11:33 AM";"cclib with rpc sounds nice and contained for 3rd party extensions";"";"";
"365714438864633856";"dukeleto#7326";"29-Jan-19 07:33 AM";"just like you have a city bicycle and a mountain bicycle and all the appropriate gear for each, there are no bad conditions, just unprepared people";"";"";
"371114647052615681";"Mylo#8306";"29-Jan-19 07:03 PM";"Letoism üö≤";"";"treasure (1)";
"272003866906722306";"TonyL#3577";"01-Feb-19 08:24 AM";"How to properly distribute binaries for cclib support: should I attach libs to binary? How to mass update users in case of libraries change? ü§î";"";"";
"455741312273219595";"jl777c#5810";"01-Feb-19 08:53 AM";"for now it is statically linked, so it is all in komodod";"";"üëå (1)";
"455741312273219595";"jl777c#5810";"01-Feb-19 08:53 AM";"but yes ultimately, you could update just with the libcc.o";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:25 PM";"libcc.so is currently statically linked so you need to relink komodod, but work is being done so it can be dynamically loaded";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:26 PM";"then it just needs to be in the same dir as komodod and it will update CC to whatever is in the libcc.so";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:55 PM";"make a copy of cclib.cpp";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:55 PM";"edit the table that defines rpc calls";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:55 PM";"add one that is ""hello""";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:55 PM";"build the libcc.so and put it in ~/komodo/src and rebuild";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:55 PM";"now cclibinfo will show the hello rpc call";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:56 PM";"cclib hello 17 will invoke it";"";"";
"455741312273219595";"jl777c#5810";"16-Feb-19 07:57 PM";"yes, it is the evalcode, must be >= 16 < 128";"";"";
"455741312273219595";"jl777c#5810";"17-Feb-19 12:06 PM";"FSM";"";"üëç (1)";
"365714438864633856";"dukeleto#7326";"17-Feb-19 12:32 PM";"cclib stuff compiles on mac now, it's in jl777, not sure if it's in FSM yet";"";"";
"455741312273219595";"jl777c#5810";"18-Feb-19 06:56 PM";"it is";"";"";
"455741312273219595";"jl777c#5810";"25-Feb-19 12:41 PM";"rawhex = FinalizeCCTx(-1LL,cp,tmpmtx,mypk,txfee,CScript() << OP_RETURN << E_MARSHAL(ss << (uint8_t)EVAL_FAUCET2 << (uint8_t)'G' << j));";"";"";
"455741312273219595";"jl777c#5810";"25-Feb-19 12:41 PM";"just the nonce used";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 12:41 AM";"Anyone around right now who is familiar with cclib?

I am trying to get the documentation ready for developers.komodoplatform.com";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 12:41 AM";"Have a few questions";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 12:41 AM";"Specifically, I'm working on the first command:

```
## cclib

**cclib method [evalcode] [json_params]**

The `cclib` method allows the user to interact with the dynamic CryptoConditions module associated with `evalcode`.

Each `evalcode` module can have unique `json_params` inputs, as well as unique responses.

### Arguments:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| method      | (string)         | the name of the method                                  |
| evalcode    | (decimal number) | the `EVALCODE` of the module of interest        |
| json_params | (array)          | the parameters to be supplied to the method, provided as an array |

### Response:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| (each `EVALCODE` is unique ||| 
```";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 12:46 AM";"This raw documentation was prepared by someone else, and I have questions about it.

In this line here:

```
**cclib method [evalcode] [json_params]**
```

The prepared of the raw docs suggests that evalcode is given as an array, or, perhaps the preparer thought that EVALCODE was optional, and put `[evalcode]` in brackets thinking that it was supposed to be `(evalcode)` in parens. 

I'm not sure. 

From the description of the `cclib` method or rpc, it would seem that each execution of `cclib` will have an EVALCODE -- and only one EVALCODE.

Also, the term `method` is not descriptive. Is this referring to an idea that for each EVALCODE there can be unique methods plugged in here?

I would think that this line would be written like this:

```
**cclib insert_method insert_evalcode [json_params]**
```

Also, one more thing: I need an explicit example for the `cclib` rpc, specifically to alleviate any of this kind of confusion. 

Any help is appreciated. Thank you!";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 12:54 AM";"`./komodo-cli -ac_name=ROGUE cclib extract 17 \""[%22a963899fce66e303f8dc30faaee1e4550c93f612e3bdf53fc755c064974ebc2c%22,%22031d6340665e4be675e6b39093152b6169e546ac6885c39058c4c60afee529d491%22]\""`";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 12:55 AM";"most things are required to be wrapped in `%22`";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:21 AM";"Excellent, thank you. Working on adding in info.";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:30 AM";"@Alright 

What do you think about this?

```
## cclib

**cclib insert_method insert_evalcode \""[%22json_params%22]\""**

The `cclib` method allows the user to interact with the dynamic CryptoConditions module associated with `evalcode`.

Each `evalcode` module has unique methods and json parameters associated, as well as unique responses.

Inside the `[]` brackets of the array, the json parameters must be wrapped with the characters `%22`.

### Arguments:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| method      | (string)         | the unique name of the method                                  |
| evalcode    | (decimal number) | the `EVALCODE` of the module of interest        |
| json_params | (array)          | the parameters to be supplied to the method, provided as an array |

### Response:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| (each `EVALCODE` is unique) |||
```";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 01:31 AM";"`cclibinfo <evalcode>` will give you a full list";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 01:31 AM";"probably worth mentioning";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:32 AM";"Can I get the output from that example command you gave?";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:33 AM";"I'm putting a link to the `cclibinfo` method. It's in the same doc.";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:35 AM";"@Alright";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 01:35 AM";"```
## cclib

**cclib insert_method insert_evalcode \""[%22json_params%22]\""**

The `cclib` method allows the user to interact with the dynamic CryptoConditions module associated with `evalcode`.

Each `evalcode` module has unique methods and json parameters associated, as well as unique responses.

Inside the `[]` brackets of the array, the json parameters must be wrapped with the characters `%22`.

::: tip
The [cclibinfo](../komodo-api/cclib.html#cclibinfo) method returns a complete list of available methods and their parameters for each unique `evalcode`.
:::

### Arguments:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| method      | (string)         | the unique name of the method                                  |
| evalcode    | (decimal number) | the `EVALCODE` of the module of interest        |
| json_params | (array)          | the parameters to be supplied to the method, provided as an array |

### Response:

| Name        | Type             | Description                                         |
| ----------- | ---------------- | --------------------------------------------------- |
| (each `EVALCODE` is unique) |||

#### :pushpin: Examples:

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib extract 17 \""[%22a963899fce66e303f8dc30faaee1e4550c93f612e3bdf53fc755c064974ebc2c%22,%22031d6340665e4be675e6b39093152b6169e546ac6885c39058c4c60afee529d491%22]\""
```
```";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 02:00 AM";"@Alright 

Also, in the `cclibinfo` method, there is a returned value, `funcid`.

This is the description provided:

```
| funcid          | (character)      | for methods that generate a transaction, the `funcid` value is the `""funcid in the""` `opreturn`; for methods that do not generate a transaction, the `funcid` value is a mneumonic |
```";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 02:00 AM";"I can't fully make sense of it.";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 02:01 AM";"What is the `""funcid in the ""` `opreturn`?";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 02:02 AM";"and what is the `mnemonic` referring to?

What does it remind the user of?";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 02:05 AM";"every tx that spends CC utxos will have a a function id in the OP_RETURN";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 02:05 AM";"it determines which function will be used to validate it";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 02:12 AM";"@Alright 

Have you prepared any content, by chance, for the `-ac_cclib` launch parameter?";"";"";
"232679450301431808";"blackjok3r#3181";"05-Mar-19 03:13 AM";"@Deleted User  `what is %22 for?`
No idea I used `""` and wrapped it all in single quotes testing musig, and had no problems. Maybe the %22 is just to pass the JSON though a bash script?";"";"";
"455741312273219595";"jl777c#5810";"05-Mar-19 05:48 AM";"yes";"";"";
"455741312273219595";"jl777c#5810";"05-Mar-19 05:48 AM";"needed something that always parsed through whatever means used";"";"";
"232679450301431808";"blackjok3r#3181";"05-Mar-19 06:30 AM";"yes but you MUST use `komodo-cli -ac_name=MUSIG`  cant use a bash script to shorten the command.";"";"";
"232679450301431808";"blackjok3r#3181";"05-Mar-19 06:32 AM";"I found that to be easier to read and work with and I just use loads of terminals each with one command then press up and copy paste in the hashes... far easier than typing it every time and worrying about json syntax.";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 03:16 PM";"@Bryan_Beus what do we need exactly? They will mostly be specific to the CC";"";"";
"405011811511828481";"Alright#0419";"05-Mar-19 03:16 PM";"a doc for musig/dilithium is going to look different than a doc for ROGUE";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 09:33 PM";"@Alright 

For cclib, I just need the example output for the example in the `cclib` call.

#### üìå Examples:

Command:

```bash
./komodo-cli -ac_name=ROGUE cclib extract 17 \""[%22a963899fce66e303f8dc30faaee1e4550c93f612e3bdf53fc755c064974ebc2c%22,%22031d6340665e4be675e6b39093152b6169e546ac6885c39058c4c60afee529d491%22]\""
```";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 09:33 PM";"I need to insert:

Response:

```
terminal response here
```";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 09:34 PM";"We just need an example to show what the function is generally referring to.";"";"";
"369608312955731968";"Bryan_Beus#6442";"05-Mar-19 09:34 PM";"We don't need to document every method.";"";"";
"405011811511828481";"Alright#0419";"18-Mar-19 02:37 AM";"`curl $user:$pass@127.0.0.1:54651 --data '{""method"": ""cclib"", ""params"": [""func0"",""17"", ""1""]}'`";"";"";
"371114647052615681";"Mylo#8306";"05-Apr-19 01:29 AM";"```
#include <mysql/mysql.h>
#include <stdio.h>
#include <stdlib.h>
```
then add to your gcc command
```
-I/usr/local/include/mysql -L/usr/local/lib/mysql -lmysqlclient
```

Have not tested yet, will be doing so over weekend or next week (likely)";"";"";
"371114647052615681";"Mylo#8306";"05-Apr-19 01:30 AM";"To the whole daemon or just to your cclib?";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 06:43 AM";"what blockchain variables can it access? how do you pass in arguments? is nesting supported?";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:37 AM";"if there is a way to expose all the functions in the cc dir, that would be really nice.";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:38 AM";"with JS wrappers to all the useful C functions, then the JS scripts can become very useful";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:38 AM";"the other idea i had was using the opreturn as a way to pass in parameters, so that is up to 8kb of parameters";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:39 AM";"and the output would be some standard type, which in turn could be used as inputs to another JS function";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:39 AM";"so a library of JS code can be made and 8kb of JS code reduced to a txid of where it is";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:39 AM";"kind of like defining a specific txid to be a specific JS function";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:40 AM";"oh, maybe there can be an include functionality, that includes a bunch of ""files"" which are actually txids";"";"";
"455741312273219595";"jl777c#5810";"10-Apr-19 11:40 AM";"the idea is to have a set of highly optimized opreturn JS code into a txid based library of functions";"";"";
