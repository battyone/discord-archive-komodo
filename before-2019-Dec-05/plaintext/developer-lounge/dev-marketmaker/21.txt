==============================================================
Guild: Komodo
Channel: dev-marketmaker
Topic: Discussion about AtomiAPI and its market making tech.
Messages: 100
Range: before 05-Dec-19 12:00 AM
==============================================================

[12-Sep-19 08:25 AM] jorian#4555
noticed a BCH electrum doing weird
```12 08:14:33, rpc_clients:1089] V4(203.150.148.49:50001) error Os { code: 111, kind: ConnectionRefused, message: "Connection refused" }
```
after some googling i noticed it's the 2nd one in the list: `bch.loping.net` resolves to the above ip

[12-Sep-19 08:25 AM] jorian#4555
should we remove it from coins repo?

[12-Sep-19 08:26 AM] jorian#4555
<https://1209k.com/bitcoin-eye/ele.php?chain=bch> shows the connection is closed

[12-Sep-19 03:39 PM] cipi#4502
yes, i think it is a good idea to keep the coins repo uptodate
thanks

[13-Sep-19 08:37 AM] jorian#4555
<https://community.binance.org/topic/1758/binance-chain-testnet-archimedes-upgrade-announcement> saw this mentioned in off-topictalk:
>>> A few new BEPs are implemented in this new release:

Atomic Swap and Hash Timelock Contract (HTLC): As explained in BEP3, HTLC has been used for Atomic Swap and cross payment channels between different blockchains. BEP3 defines native transactions to support HTLC on Binance Chain and also proposes the standard infrastructure and procedure to use HTLC for inter-chain atomic swap to easily create and use pegged token.

[13-Sep-19 08:38 AM] jorian#4555
wouldn't this theoretically mean Binance Coin can be supported in atomicdex?

[13-Sep-19 11:53 AM] grewalsatinder#9653
support of HTLC means it should be

[13-Sep-19 11:54 AM] grewalsatinder#9653
@cipi ^^ üôÇ

[17-Sep-19 07:17 AM] allbits#5898
I've been running steady bobs on mm2 for weeks. Is there any reason to update? Everything seems fine and dandy

[18-Sep-19 02:00 PM] artem.pikulin#0794
@allbits Hi, I'm glad to know that it works good for you! As we're still in beta  it's recommended to track MM2 repo and update whenever new commits are pushed to `mm2` branch to be 100% compatible with other nodes.

[18-Sep-19 02:09 PM] artem.pikulin#0794
@ca333 @siu - Chainmakers @hyperDEX @Slyris Hi! Please check the most recent change in MM2: https://github.com/KomodoPlatform/developer-docs/pull/126/files. The `rational` number type is added for ordermatching and it's highly recommended to support it as fast as possible. It's backwards-compatible with previous versions, but should solve the issues with numbers like `1/3` which can't be represented as finite decimal. So from now you may create an order with exactly `4/3` price and receive 3 RICK for your 4 MORTY. Please pay attention that `buy`, `sell`, `setprice` will stop accepting decimal numbers soon in requests, but will always display the decimal amounts in responses for readability. I've also left a note regarding the JSON representation used by `num-rational` crate. If you have any questions please let me know.

{Reactions}
üëç (2) üíØ 

[18-Sep-19 02:20 PM] allbits#5898
Thank you

[18-Sep-19 02:36 PM] siu - Chainmakers#3920
üëç

[18-Sep-19 02:45 PM] cipi#4502
`Please pay attention that buy, sell, setprice will stop accepting decimal numbers soon in requests`
what does that mean? i get the prices for `setprice` from coinpaprika...

[18-Sep-19 02:48 PM] jl777c#5810
forcing everything to use rational numbers doesnt make sense. this is not a consensus issue and a bit of rounding errors is not any big deal.

[18-Sep-19 02:48 PM] jl777c#5810
i STRONGLY suggest to retain the ability to just use decimal numbers FOREVER

[18-Sep-19 02:48 PM] jl777c#5810
adding support for rational numbers is nice to have, but i dont know why it is prioritized above all the other things that are needed??

[18-Sep-19 02:49 PM] cipi#4502
like https://api.coinpaprika.com/v1/price-converter?base_currency_id=kmd-komodo&quote_currency_id=btc-bitcoin&amount=1
which returns `price    0.00007153638969897673`

[18-Sep-19 02:49 PM] jl777c#5810
traders wont care about a lost 0.0000001

[18-Sep-19 02:49 PM] jl777c#5810
yes, floating point like that needs to be supported, otherwise it will break all things that use mm2

[18-Sep-19 02:50 PM] jl777c#5810
we dont break backward compatibility unless there is some giant reason to do so and supporting ratiional numbers is not any giant reason to throw out normal decimal numbers

[18-Sep-19 03:19 PM] mobipoi#5774
@jl777c  I care

[18-Sep-19 03:20 PM] mobipoi#5774
about my "0.0000001"

[18-Sep-19 03:20 PM] ca333#0118
we could likely keep both options - decimal and rational - where the latter provides "real" precision preventing all these rounding and floating point issues

[18-Sep-19 03:25 PM] cipi#4502
how do you do math with this? What is `0.00007153 * 1.03` in this rational represantation?

[18-Sep-19 03:27 PM] jl777c#5810
7153/100000000 * 103/100

[18-Sep-19 03:28 PM] jl777c#5810
it wil be a giant pain to do all the math in this way

[18-Sep-19 03:28 PM] jl777c#5810
which will hurt adoption

[18-Sep-19 03:29 PM] jl777c#5810
if there are bugs that need rational representation to fix, then it should be implemented internally so the external requests can use normal floating point representation and it is converted to rational numbers internally

[18-Sep-19 03:29 PM] jl777c#5810
"dont break userspace" is a very valid point

{Reactions}
üíØ (3) 

[18-Sep-19 04:28 PM] artem.pikulin#0794
As we can see we already got a feedback that people care about their 1 satoshi. Also from my personal experience it's pretty annoying when you get bunch of such few satoshis dust on exchange like Binance due to rounding. Regarding `giant pain` I'd argue as there're packages available for popular languages:
1. JS - https://www.npmjs.com/package/big-rational
2. Dart - https://pub.dev/packages/rational
3. Python - https://docs.python.org/3/library/fractions.html
4. etc.
And also even if there's no library it's actually not hard programming task to implement such number or provide this as precompiled MM2 library that can be linked to C/C++ project or as WASM module for web environment.

{Embed}
https://www.npmjs.com/package/big-rational
big-rational
An arbitrary length rational number library for Javascript
https://static.npmjs.com/338e4905a2684ca96e08c7780fc68412.png

{Embed}
https://pub.dev/packages/rational
rational | Dart Package
The rational package allows you to deal with rational numbers
https://pub.dev/static/img/dart-logo-400x400.png?hash=i18bc8g4aa2r6vf85lpgro6ml5ltd13g

[18-Sep-19 04:30 PM] artem.pikulin#0794
Converting to rationals directly won't make sense since decimal can't represent e.g. `1/3` without rounding. The main goal of using rational is to avoid roundings at all. We're dealing with money so having precise calculations is very important.

[18-Sep-19 04:31 PM] jl777c#5810
yes, but it isnt a consensus issue and changing from floating point to rational numbers only, that will be an issue

[18-Sep-19 04:31 PM] jl777c#5810
if you can support both ways, that is much better

[18-Sep-19 04:32 PM] jl777c#5810
for the people that want that extra half satoshi, they can use rational numbers

[18-Sep-19 04:32 PM] jl777c#5810
for those that dont care, they can use floating point

[18-Sep-19 04:34 PM] allbits#5898
Sorry to interrupt your flow. A noob question. I updated with git pull. Started again. Everything works fine. My orders are still there, etc. But when I do method version I get result UNKNOWN. Have I done something wrong or missed a step?  Thanks. Please ignore until you're done your conversation

[18-Sep-19 04:34 PM] artem.pikulin#0794
MM2 supports both ways now and will support until we get the confirmation from all GUI developers and CLI users that they are able to use rational representation without decimals. The conversion between formats introduce rounding errors which might affect ordermatching experience, such as `0.3333 < 1/3` and orders won't match.

[18-Sep-19 04:35 PM] cipi#4502
just add 1% to the price and it will match... it doesn't matter anyway, since the price that is used, is the price set by the maker... so if the taker adds 1% to his price, he will still get the lower price, right?

[18-Sep-19 04:36 PM] jl777c#5810
i can guarantee there will be people that wont be able to adapt to rational numbers, so if we lose ability to use floating point, then we will lose cli users and some gui devs

[18-Sep-19 04:36 PM] jl777c#5810
yes, just adjust price by even 0.1% and that will more than compensate for a satoshi rounding error

[18-Sep-19 04:38 PM] artem.pikulin#0794
Maybe I was just too eager with `rational-only`, let's see how it goes. GUI users won't have to input rational numbers, they will be displayed the rounded amount, e.g. `you will get the 3 RICK for your 4 MORTY`, the price is `~1.33333`

[18-Sep-19 04:39 PM] jl777c#5810
unless the rational numbers can also be input as floating point, this is not an improvement, just an additional barrier to solve a satoshi rounding issue

[18-Sep-19 04:39 PM] jl777c#5810
again, i repeat, again

[18-Sep-19 04:39 PM] jl777c#5810
this is not affecting the blockchain consensus

[18-Sep-19 04:40 PM] jl777c#5810
it only affects if an ordermatch is rejected by a fraction of a satoshi

[18-Sep-19 04:40 PM] jl777c#5810
so, just add/subtract 0.0001%, that will solve the actual issue and not force a much harder to use syntax for numbers, when it isnt needed

[18-Sep-19 04:41 PM] jl777c#5810
if someone really demands exact matching to the fraction of a satoshi, then they can use the rational representation

[18-Sep-19 04:41 PM] artem.pikulin#0794
Noone is forced to use rational by now.

[18-Sep-19 04:41 PM] jl777c#5810
yes, but you announced that it will be required in the future. if the api gets to where you cant just submit "price":1.234, that will be a big step backwards in usability

[18-Sep-19 04:42 PM] jl777c#5810
first, it will break ALL userspace of everything using the api

[18-Sep-19 04:42 PM] artem.pikulin#0794
I personally prefer to avoid magical `addition or subtraction` by software that deals with my money.

[18-Sep-19 04:42 PM] jl777c#5810
that alone makes it a non-starter, so i dont know why we are discussing this

[18-Sep-19 04:42 PM] artem.pikulin#0794
I already said that I was too eager maybe.

[18-Sep-19 04:42 PM] jl777c#5810
i have no problems with a dual-mode

[18-Sep-19 04:42 PM] jl777c#5810
my issue was with breaking all of userspace and forcing a new numerical system unfamiliar to 99%

[18-Sep-19 04:43 PM] jl777c#5810
we are not BTC legacy devs

[18-Sep-19 04:43 PM] artem.pikulin#0794
So i said keeping dual mode it's not a problem and it will be kept depending on user experience.

[18-Sep-19 04:43 PM] jl777c#5810
let us honor backward compatibility and the time people have spent to get things working with the api as much as possible

[18-Sep-19 04:43 PM] jl777c#5810
my user experience with the proposed removal of floating point representation is not good

[18-Sep-19 04:44 PM] artem.pikulin#0794
I honor backward compatibility so I implemented dual mode.

[18-Sep-19 04:44 PM] jl777c#5810
as long as it is dual mode, i am ok

[18-Sep-19 04:44 PM] artem.pikulin#0794
Please stop attacking and read above messages.

[18-Sep-19 04:44 PM] jl777c#5810
i am not attacking, i am stating my position

[18-Sep-19 04:44 PM] artem.pikulin#0794
Your position is already accepted.

[18-Sep-19 04:44 PM] jl777c#5810
you keep saying, "depending on how it is received"

[18-Sep-19 04:45 PM] jl777c#5810
i am saying that exclusively using a rational number syntax that is unfamiliar to most is not a good idea,but you keep raising the possibility of eliminating floating point.

[18-Sep-19 04:47 PM] ca333#0118
Having the dual mode (rational AND decimal) will keep backwards compatiblity and at the same time enable precise systems/GUIs to be developed using mm2 without having to use +0.001% hackarounds (which the less precise implementations can still use) - this should likely resolve all problems and prevent the need for further discussion.

[18-Sep-19 04:47 PM] jl777c#5810
i am ok with dual mode

[18-Sep-19 04:48 PM] cipi#4502
sounds good... as long as i can continue to do `setprice` with 8 decimals, all is fine üôÇ

[18-Sep-19 04:48 PM] jl777c#5810
exactly

[18-Sep-19 04:48 PM] ComputerGenie üë¥üèºüì¢#7004
_places his order of `œÄ at the price of œÄ`_

{Reactions}
üòÜ 

[18-Sep-19 04:50 PM] Slyris#2880
Interesting.

[18-Sep-19 04:52 PM] Slyris#2880
We can also use the same algorithm for calculation as BC does , means using strings to do all calculation

[18-Sep-19 04:52 PM] ca333#0118
After digging into financial software we came to the conclusion that the rational datatype is the way to go IF we want to offer real precision - financial software usually would prevent using floating points except for representations (UI) - internally and specially IF full precision is required banking software would just use multiplications to treat all numbers as full INTs during arithmetic operations - which in our case isn't possible due to the trading engine's nature (requiring divisions for certain operations).

[18-Sep-19 04:52 PM] Slyris#2880
Real precision with string is the best way

[18-Sep-19 04:52 PM] Slyris#2880
To solve the problem

[18-Sep-19 04:52 PM] ca333#0118
@Slyris BTC doesn't use strings but rather full INTs - similar to how banking/financial software works.

[18-Sep-19 04:53 PM] Slyris#2880
Yeah but use them as string representation

[18-Sep-19 04:53 PM] Slyris#2880
Means no errors.

[18-Sep-19 04:53 PM] Slyris#2880
String as int Can be infinite digits

[18-Sep-19 04:53 PM] ca333#0118
Basically multiplying the amount (often represented as decimal num in the UI) by the base to turn it a full INT. e.g. 1.32 USD would become 132 Pennies (decimal base 10^2).

[18-Sep-19 04:53 PM] ca333#0118
In our case the base is satoshi 10^8

[18-Sep-19 04:54 PM] Slyris#2880
Yeah

[18-Sep-19 04:54 PM] Slyris#2880
Means moving the decimal on the right

[18-Sep-19 04:54 PM] Slyris#2880
Simply.

[18-Sep-19 04:54 PM] Slyris#2880
And add zeros.

[18-Sep-19 04:54 PM] Slyris#2880
Internally the market maker bot use strings

[18-Sep-19 04:55 PM] Slyris#2880
But you can even use the real BC as calculate tools

[18-Sep-19 04:55 PM] Slyris#2880
Which is the most precise tools even used by NASA

[18-Sep-19 04:55 PM] ca333#0118
BTC has the CAmount datatype which is a internal int64_t repr. if not mistaken - so again landing at full int representation for internal arithmetic operations.

[18-Sep-19 04:56 PM] jl777c#5810
yes

[18-Sep-19 04:56 PM] jl777c#5810
string representation is only at the rpc level where it is immediately converted

[18-Sep-19 04:56 PM] jl777c#5810
since any decimal representation can be auto-converted to rational, it seems this is a moot issue

[18-Sep-19 04:56 PM] Slyris#2880
Yeah true also

[18-Sep-19 04:56 PM] Slyris#2880
But what about erc20

[18-Sep-19 04:56 PM] ca333#0118
Anyway - to be fair, i was also voting up a pure rational num utilisation - but i do agree now that a dual mode makes more sense. Issues resolved.

[18-Sep-19 04:57 PM] jl777c#5810
and it makes sense to automate this conversion so we dont have to educate all possible users of mm2 api on a new number representation

[18-Sep-19 04:57 PM] Slyris#2880
And if someone create a protocol with more digits

[18-Sep-19 04:57 PM] ca333#0118
10^18 @Slyris

